<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>黑色红桃7</title>
    <link href="http://example.com" />
    <updated>2021-04-23T12:22:42.000Z</updated>
    <entry>
        <id>http://example.com/2021-04-23-go-dynamic-type-md/</id>
        <title>go接口动态类型</title>
        <link rel="alternate" href="http://example.com/2021-04-23-go-dynamic-type-md/"/>
        <content type="html">&lt;h3 id=&#34;接口使用&#34;&gt;&lt;a href=&#34;#接口使用&#34; class=&#34;headerlink&#34; title=&#34;接口使用&#34;&gt;&lt;/a&gt;接口使用&lt;/h3&gt;&lt;p&gt;golang的接口与java里的接口使用上比较相似, 写一个简单的demo&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; main&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; (&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; Animal &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;br&gt;	sing()&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; Bird &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	color &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;	weight &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(p Bird)&lt;/span&gt;&lt;span class=&#34;hljs-title&#34;&gt;sing&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	fmt.Println( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zhi-zhi&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; Cat &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	color &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(p Cat)&lt;/span&gt;&lt;span class=&#34;hljs-title&#34;&gt;sing&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	fmt.Println( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;miao-mi&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; anim Animal&lt;br&gt;	fmt.Printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%T, %v\n&amp;quot;&lt;/span&gt;, anim, anim)&lt;br&gt;	anim = Bird&amp;#123;color: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, weight: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&amp;#125;&lt;br&gt;	fmt.Printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%T, %v\n&amp;quot;&lt;/span&gt;, anim, anim)&lt;br&gt;	anim = Cat&amp;#123;color: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;br&gt;	fmt.Printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%T, %v\n&amp;quot;&lt;/span&gt;, anim, anim)&lt;br&gt;	anim.sing()&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//打印结果:&lt;/span&gt;&lt;br&gt;&amp;lt;&lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt;&amp;gt;&lt;br&gt;main.Bird, &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&amp;#125;&lt;br&gt;main.Cat, &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;br&gt;miao-mi&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;实现分析&#34;&gt;&lt;a href=&#34;#实现分析&#34; class=&#34;headerlink&#34; title=&#34;实现分析&#34;&gt;&lt;/a&gt;实现分析&lt;/h3&gt;&lt;p&gt;反汇编一下代码，找到**anim = Bird{color: 1, weight: 100}**这行代码&lt;/p&gt;
&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs x86asm&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0305&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00773&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;XORPS&lt;/span&gt;   X0, X0&lt;br&gt;//在地址autotmp_27上构造一个Bird&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0308&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00776&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVUPS&lt;/span&gt;  X0, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_27+&lt;span class=&#34;hljs-number&#34;&gt;144&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0310&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00784&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;$1&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_27+&lt;span class=&#34;hljs-number&#34;&gt;144&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x031c&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00796&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;$100&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_27+&lt;span class=&#34;hljs-number&#34;&gt;152&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//Bird的itab地址赋值给&lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;，再赋值给(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0328&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00808&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       LEAQ    go&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;itab.&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.Bird,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.Animal(SB), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x032f&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00815&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, (&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0333&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00819&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       LEAQ    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_27+&lt;span class=&#34;hljs-number&#34;&gt;144&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;//把临时的Bird的地址赋值&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x033b&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00827&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;以itab和构造的Bird为参数调用 runtime&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;convT2Inoptr&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0340&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00832&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;CALL&lt;/span&gt;    runtime&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;convT2Inoptr(SB)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0345&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00837&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x034a&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00842&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x034f&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00847&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.anim+&lt;span class=&#34;hljs-number&#34;&gt;432&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0357&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00855&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.anim+&lt;span class=&#34;hljs-number&#34;&gt;440&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;runtime.convT2Inoptr&lt;/strong&gt; 实现可以在runtime/iface.go文件下找到:&lt;/p&gt;
&lt;figure class=&#34;highlight maxima&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs maxima&#34;&gt;func convT2Inoptr(&lt;span class=&#34;hljs-built_in&#34;&gt;tab&lt;/span&gt; *itab, &lt;span class=&#34;hljs-built_in&#34;&gt;elem&lt;/span&gt; unsafe.Pointer) (i iface) &amp;#123;&lt;br&gt;	t := &lt;span class=&#34;hljs-built_in&#34;&gt;tab&lt;/span&gt;._type&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; raceenabled &amp;#123;&lt;br&gt;		raceReadObjectPC(t, &lt;span class=&#34;hljs-built_in&#34;&gt;elem&lt;/span&gt;, getcallerpc(), funcPC(convT2Inoptr))&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; msanenabled &amp;#123;&lt;br&gt;		msanread(&lt;span class=&#34;hljs-built_in&#34;&gt;elem&lt;/span&gt;, t.size)&lt;br&gt;	&amp;#125;&lt;br&gt;	x := mallocgc(t.size, t, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;)&lt;br&gt;	memmove(x, &lt;span class=&#34;hljs-built_in&#34;&gt;elem&lt;/span&gt;, t.size)&lt;br&gt;	i.&lt;span class=&#34;hljs-built_in&#34;&gt;tab&lt;/span&gt; = &lt;span class=&#34;hljs-built_in&#34;&gt;tab&lt;/span&gt;&lt;br&gt;	i.data = x&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;return&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回的iface结构：&lt;/p&gt;
&lt;figure class=&#34;highlight gauss&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs gauss&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt; iface &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;tab&lt;/span&gt;  *itab&lt;br&gt;	data unsafe.Pointer&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt; itab &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	inter *interfacetype&lt;br&gt;	_type *_type&lt;br&gt;	hash  uint32 &lt;span class=&#34;hljs-comment&#34;&gt;// copy of _type.hash. Used for type switches.&lt;/span&gt;&lt;br&gt;	_     [&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;]byte&lt;br&gt;	fun   [&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]uintptr &lt;span class=&#34;hljs-comment&#34;&gt;// variable sized. fun[0]==0 means _type does not implement inter.&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;变量anim在内存中的表示就是一个iface结构体&lt;/li&gt;
&lt;li&gt;从汇编代码可以看到itab信息是存储在SB(全局变量)中的&lt;/li&gt;
&lt;li&gt;anim的动态类型绑定就是通过在itab绑定类型信息实现的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;验证&#34;&gt;&lt;a href=&#34;#验证&#34; class=&#34;headerlink&#34; title=&#34;验证&#34;&gt;&lt;/a&gt;验证&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; main&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; (&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;unsafe&amp;quot;&lt;/span&gt;&lt;br&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; Animal &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;br&gt;	sing()&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; Bird &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	color &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;	weight &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(p Bird)&lt;/span&gt;&lt;span class=&#34;hljs-title&#34;&gt;sing&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	fmt.Printf( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bird&amp;#123;color: %d, weight:%d&amp;#125; is sing &amp;quot;&lt;/span&gt;, p.color, p.weight)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; itab &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	inter unsafe.Pointer&lt;br&gt;	_type unsafe.Pointer&lt;br&gt;	hash  &lt;span class=&#34;hljs-keyword&#34;&gt;uint32&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// copy of _type.hash. Used for type switches.&lt;/span&gt;&lt;br&gt;	_     [&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;]&lt;span class=&#34;hljs-keyword&#34;&gt;byte&lt;/span&gt;&lt;br&gt;	fun   [&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// variable sized. fun[0]==0 means _type does not implement inter.&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; eface &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	tab  *itab&lt;br&gt;	data *Bird&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; anim Animal = Bird&amp;#123;color: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, weight: &lt;span class=&#34;hljs-number&#34;&gt;1999&lt;/span&gt;&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; e = (*eface)(unsafe.Pointer(&amp;amp;anim))&lt;br&gt;	e.data.sing()&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印结果: bird{color: 1, weight:1999} is sing &lt;br&gt;&lt;br&gt;符合预期&lt;/p&gt;
</content>
        <updated>2021-04-23T12:22:42.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021-04-22-go-str-byte-md/</id>
        <title>go str与byte转换</title>
        <link rel="alternate" href="http://example.com/2021-04-22-go-str-byte-md/"/>
        <content type="html">&lt;h3 id=&#34;string与-byte的转换&#34;&gt;&lt;a href=&#34;#string与-byte的转换&#34; class=&#34;headerlink&#34; title=&#34;string与[]byte的转换&#34;&gt;&lt;/a&gt;string与[]byte的转换&lt;/h3&gt;&lt;h4 id=&#34;一般转换方式&#34;&gt;&lt;a href=&#34;#一般转换方式&#34; class=&#34;headerlink&#34; title=&#34;一般转换方式&#34;&gt;&lt;/a&gt;一般转换方式&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;bytesFromStr := []&lt;span class=&#34;hljs-keyword&#34;&gt;byte&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;abcdefg&amp;quot;&lt;/span&gt;)&lt;br&gt;strFromBytes := &lt;span class=&#34;hljs-keyword&#34;&gt;string&lt;/span&gt;([]&lt;span class=&#34;hljs-keyword&#34;&gt;byte&lt;/span&gt;&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;97&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;98&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;99&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&amp;#125;)&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;unsafe转换方式&#34;&gt;&lt;a href=&#34;#unsafe转换方式&#34; class=&#34;headerlink&#34; title=&#34;unsafe转换方式&#34;&gt;&lt;/a&gt;unsafe转换方式&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; StringHeader &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	Data &lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt;&lt;br&gt;	Len  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; SliceHeader &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	Data &lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt;&lt;br&gt;	Len  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;	Cap  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;str2Bytes&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(s &lt;span class=&#34;hljs-keyword&#34;&gt;string&lt;/span&gt;)&lt;/span&gt; []&lt;span class=&#34;hljs-title&#34;&gt;byte&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	sh := (*StringHeader)(unsafe.Pointer(&amp;amp;s))&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *(*[]&lt;span class=&#34;hljs-keyword&#34;&gt;byte&lt;/span&gt;)(unsafe.Pointer(&amp;amp;SliceHeader&amp;#123;&lt;br&gt;		Data: sh.Data,&lt;br&gt;		Len: sh.Len,&lt;br&gt;		Cap: sh.Len,&lt;br&gt;	&amp;#125;))&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Bytes2Str&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(b []&lt;span class=&#34;hljs-keyword&#34;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *(*&lt;span class=&#34;hljs-keyword&#34;&gt;string&lt;/span&gt;)(unsafe.Pointer(&amp;amp;b))&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <updated>2021-04-22T14:10:34.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021-04-17-go-interface-md/</id>
        <title>go interface{}刨析</title>
        <link rel="alternate" href="http://example.com/2021-04-17-go-interface-md/"/>
        <content type="html">&lt;h3 id=&#34;初识interface&#34;&gt;&lt;a href=&#34;#初识interface&#34; class=&#34;headerlink&#34; title=&#34;初识interface{}&#34;&gt;&lt;/a&gt;初识interface{}&lt;/h3&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;func my&lt;span class=&#34;hljs-constructor&#34;&gt;Print(&lt;span class=&#34;hljs-params&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt; &amp;#123;&lt;br&gt;    fmt.&lt;span class=&#34;hljs-constructor&#34;&gt;Printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%v&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;val&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用过java的，第一感觉interface{}与Object的差不多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object是任何对象的基类，所有对象都可以转成Object&lt;/li&gt;
&lt;li&gt;interface{}，表面看是一个空接口，而golang规定是只要实现了其方法就实现了该接口。即所有类型都实现了空接口，所以interface{}可接收指针，值对像，接口类型等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interface-内部结构&#34;&gt;&lt;a href=&#34;#interface-内部结构&#34; class=&#34;headerlink&#34; title=&#34;interface{}内部结构&#34;&gt;&lt;/a&gt;interface{}内部结构&lt;/h3&gt;&lt;p&gt;我们使用interface{}，一般是通过reflect反射得到他的实际类型&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;func &lt;span class=&#34;hljs-constructor&#34;&gt;PrintType(&lt;span class=&#34;hljs-params&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt; &amp;#123;&lt;br&gt;    fmt.&lt;span class=&#34;hljs-constructor&#34;&gt;Printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;reflect&lt;/span&gt;.TypeOf(&lt;span class=&#34;hljs-params&#34;&gt;arg&lt;/span&gt;)&lt;/span&gt;.&lt;span class=&#34;hljs-constructor&#34;&gt;String()&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;跟踪到TypeOf函数中：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;TypeOf&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(i &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Type&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	eface := *(*emptyInterface)(unsafe.Pointer(&amp;amp;i))&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; toType(eface.typ)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; emptyInterface &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	typ  *rtype&lt;br&gt;	word unsafe.Pointer&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; rtype &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	size       &lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt;&lt;br&gt;	ptrdata    &lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// number of bytes in the type that can contain pointers&lt;/span&gt;&lt;br&gt;	hash       &lt;span class=&#34;hljs-keyword&#34;&gt;uint32&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// hash of type; avoids computation in hash tables&lt;/span&gt;&lt;br&gt;	tflag      tflag   &lt;span class=&#34;hljs-comment&#34;&gt;// extra type information flags&lt;/span&gt;&lt;br&gt;	align      &lt;span class=&#34;hljs-keyword&#34;&gt;uint8&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// alignment of variable with this type&lt;/span&gt;&lt;br&gt;	fieldAlign &lt;span class=&#34;hljs-keyword&#34;&gt;uint8&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// alignment of struct field with this type&lt;/span&gt;&lt;br&gt;	kind       &lt;span class=&#34;hljs-keyword&#34;&gt;uint8&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// enumeration for C&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// function for comparing objects of this type&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// (ptr to object A, ptr to object B) -&amp;gt; ==?&lt;/span&gt;&lt;br&gt;	equal     &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(unsafe.Pointer, unsafe.Pointer)&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	gcdata    *&lt;span class=&#34;hljs-keyword&#34;&gt;byte&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// garbage collection data&lt;/span&gt;&lt;br&gt;	str       nameOff &lt;span class=&#34;hljs-comment&#34;&gt;// string form&lt;/span&gt;&lt;br&gt;	ptrToThis typeOff &lt;span class=&#34;hljs-comment&#34;&gt;// type for pointer to this type, may be zero&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现interface{}的实际是一个emptyInterface的struct,下面做一下验证:&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//模仿上面自定义的结构体&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; emptyInterface &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	typ  *rtype&lt;br&gt;	word unsafe.Pointer&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//模仿上面自定义的结构体&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; rtype &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	size       &lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt;&lt;br&gt;	ptrdata    &lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// number of bytes in the type that can contain pointers&lt;/span&gt;&lt;br&gt;	hash       &lt;span class=&#34;hljs-keyword&#34;&gt;uint32&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// hash of type; avoids computation in hash tables&lt;/span&gt;&lt;br&gt;	tflag      &lt;span class=&#34;hljs-keyword&#34;&gt;uint8&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// extra type information flags&lt;/span&gt;&lt;br&gt;	align      &lt;span class=&#34;hljs-keyword&#34;&gt;uint8&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// alignment of variable with this type&lt;/span&gt;&lt;br&gt;	fieldAlign &lt;span class=&#34;hljs-keyword&#34;&gt;uint8&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// alignment of struct field with this type&lt;/span&gt;&lt;br&gt;	kind       &lt;span class=&#34;hljs-keyword&#34;&gt;uint8&lt;/span&gt;&lt;br&gt;	equal     &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(unsafe.Pointer, unsafe.Pointer)&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	gcdata    *&lt;span class=&#34;hljs-keyword&#34;&gt;byte&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// garbage collection data&lt;/span&gt;&lt;br&gt;	str       &lt;span class=&#34;hljs-keyword&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// string form&lt;/span&gt;&lt;br&gt;	ptrToThis &lt;span class=&#34;hljs-keyword&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// type for pointer to this type, may be zero&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;transForm&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(obj &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;emptyInterface&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//强制类型转换&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (*emptyInterface)(unsafe.Pointer(&amp;amp;obj))&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;hljs-keyword&#34;&gt;uint64&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;999&lt;/span&gt;&lt;br&gt;	e := transForm(a)&lt;br&gt;    fmt.Println(reflect.Kind(e.typ.kind), *(*&lt;span class=&#34;hljs-keyword&#34;&gt;uint64&lt;/span&gt;)(e.word))&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//打印出来uint64 999&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;验证了我们和猜想，可以发现interface{}的数据是一个指针，那他是如何支持值赋值的呢？如果他只是把word指向了原数据，这又和golang值传递的方式相违背&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;interface-赋值过程&#34;&gt;&lt;a href=&#34;#interface-赋值过程&#34; class=&#34;headerlink&#34; title=&#34;interface{}赋值过程&#34;&gt;&lt;/a&gt;interface{}赋值过程&lt;/h3&gt;&lt;p&gt;为了搞清楚他是如何赋值的，我们写个demo一探究竟：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; main&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; TVal &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	a &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;br&gt;	b &lt;span class=&#34;hljs-keyword&#34;&gt;string&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;printFace&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(v &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;br&gt;	fmt.Println(v)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	val := TVal&amp;#123;a: &lt;span class=&#34;hljs-number&#34;&gt;1999&lt;/span&gt;, b: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;abcdefg&amp;quot;&lt;/span&gt;&amp;#125;&lt;br&gt;	printFace(TVal&amp;#123;a: &lt;span class=&#34;hljs-number&#34;&gt;1999&lt;/span&gt;, b: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;abcdefg&amp;quot;&lt;/span&gt;&amp;#125;)&lt;br&gt;	printFace(&amp;amp;val)&lt;br&gt;	t := &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;	printFace(t)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;三种反汇编:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go build –gcflags=”-l -N” -o helloworld， 去掉优化&lt;/li&gt;
&lt;li&gt;go tool compile -N -S main.go，去掉优化&lt;/li&gt;
&lt;li&gt;go tool objdump -S test &amp;gt; abc.asm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统一使用第二种方式。&lt;/p&gt;
&lt;h4 id=&#34;值传递分析&#34;&gt;&lt;a href=&#34;#值传递分析&#34; class=&#34;headerlink&#34; title=&#34;值传递分析&#34;&gt;&lt;/a&gt;值传递分析&lt;/h4&gt;&lt;p&gt;截取 &lt;strong&gt;printFace(TVal{a: 1999, b: “abcdefg”})&lt;/strong&gt; 汇编代码:&lt;/p&gt;
&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs x86asm&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00c6&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00198&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       PCDATA  &lt;span class=&#34;hljs-number&#34;&gt;$0&lt;/span&gt;, $-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00c6&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00198&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;XORPS&lt;/span&gt;   X0, X0&lt;br&gt;//autotmp_23 可以看成是一个地址符号，基地址&lt;span class=&#34;hljs-number&#34;&gt;560&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00c9&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00201&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVUPS&lt;/span&gt;  X0, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_23+&lt;span class=&#34;hljs-number&#34;&gt;560&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00d1&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00209&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;$0&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_23+&lt;span class=&#34;hljs-number&#34;&gt;576&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//把&lt;span class=&#34;hljs-number&#34;&gt;1999&lt;/span&gt;赋值到地址&lt;span class=&#34;hljs-number&#34;&gt;560&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)上&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00dd&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00221&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;$1999&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_23+&lt;span class=&#34;hljs-number&#34;&gt;560&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//字符串的地址(SB为全局变量, go&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;string.&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;abcdefg&amp;quot;&lt;/span&gt;可以看成地址符号),赋值给&lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00e9&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00233&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       LEAQ    go&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;string.&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;abcdefg&amp;quot;&lt;/span&gt;(SB), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;//字符串的地址赋值给&lt;span class=&#34;hljs-number&#34;&gt;568&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00f0&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00240&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_23+&lt;span class=&#34;hljs-number&#34;&gt;568&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//把字符串长度&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;赋值给&lt;span class=&#34;hljs-number&#34;&gt;576&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x00f8&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00248&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;$7&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_23+&lt;span class=&#34;hljs-number&#34;&gt;576&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//获取struct TVal的类型元数据,&lt;br&gt;// autotmp_23的数据为 |&lt;span class=&#34;hljs-number&#34;&gt;1999&lt;/span&gt; (8&lt;span class=&#34;hljs-built_in&#34;&gt;byte&lt;/span&gt;)| str_addr (8&lt;span class=&#34;hljs-built_in&#34;&gt;byte&lt;/span&gt;) | &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; (8&lt;span class=&#34;hljs-built_in&#34;&gt;byte&lt;/span&gt;)|,其实就是struct &amp;#123;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, stringHeader&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0104&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00260&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       LEAQ    type.&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.TVal(SB), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;//TVal的类型元数据(_type)地址给&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x010b&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00267&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, (&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x010f&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00271&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       LEAQ    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_23+&lt;span class=&#34;hljs-number&#34;&gt;560&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;//autotmp_23地址赋值给&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0117&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00279&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x011c&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00284&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       PCDATA  &lt;span class=&#34;hljs-number&#34;&gt;$1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;$1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x011c&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00284&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;NOP&lt;/span&gt;&lt;br&gt;//调用runtime&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;convT2E，参数为(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)(*_type), &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)（struct &amp;#123;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, stringHeader&amp;#125;指针）&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0120&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00288&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;CALL&lt;/span&gt;    runtime&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;convT2E(SB)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0125&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00293&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x012a&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00298&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x012f&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00303&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_28+&lt;span class=&#34;hljs-number&#34;&gt;432&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0137&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00311&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_28+&lt;span class=&#34;hljs-number&#34;&gt;440&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x013f&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00319&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.v+&lt;span class=&#34;hljs-number&#34;&gt;224&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0147&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00327&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.v+&lt;span class=&#34;hljs-number&#34;&gt;232&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后调用runtime.convT2E，看一下源码:&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;func convT2E(t *_&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;, elem &lt;span class=&#34;hljs-keyword&#34;&gt;unsafe&lt;/span&gt;.Pointer) (e eface) &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; raceenabled &amp;#123;&lt;br&gt;		raceReadObjectPC(t, elem, getcallerpc(), funcPC(convT2E))&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; msanenabled &amp;#123;&lt;br&gt;		msanread(elem, t.size)&lt;br&gt;	&amp;#125;&lt;br&gt;	x := mallocgc(t.size, t, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;)&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// &lt;span class=&#34;hljs-doctag&#34;&gt;TODO:&lt;/span&gt; We allocate a zeroed object only to overwrite it with actual data.&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// Figure out how to avoid zeroing. Also below in convT2Eslice, convT2I, convT2Islice.&lt;/span&gt;&lt;br&gt;	typedmemmove(t, x, elem)&lt;br&gt;	e._&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; = t&lt;br&gt;	e.data = x&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;eface&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;	_&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; *_&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;&lt;br&gt;	data  &lt;span class=&#34;hljs-keyword&#34;&gt;unsafe&lt;/span&gt;.Pointer&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;** 可以发现里面申请了一块sizeof(type)大小的内存，并初始化为elem。&lt;br&gt;返回值eface和前面的emptyInterface一样 **&lt;/p&gt;
&lt;h4 id=&#34;指针传递分析&#34;&gt;&lt;a href=&#34;#指针传递分析&#34; class=&#34;headerlink&#34; title=&#34;指针传递分析&#34;&gt;&lt;/a&gt;指针传递分析&lt;/h4&gt;&lt;p&gt;截取 &lt;strong&gt;printFace(&amp;amp;val)&lt;/strong&gt; 汇编代码:&lt;/p&gt;
&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs x86asm&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02a9&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00681&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       PCDATA  &lt;span class=&#34;hljs-number&#34;&gt;$1&lt;/span&gt;, $-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02a9&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00681&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;JMP&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;683&lt;/span&gt;&lt;br&gt;//val地址赋值给&lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02ab&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00683&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.&amp;amp;val+&lt;span class=&#34;hljs-number&#34;&gt;152&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;//&lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;赋值给&lt;span class=&#34;hljs-number&#34;&gt;144&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02b3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00691&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_26+&lt;span class=&#34;hljs-number&#34;&gt;144&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//struct TVal的类型元数据指针赋值给&lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02bb&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00699&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       LEAQ    type.*&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.TVal(SB), &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;&lt;br&gt;//&lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;，即struct TVal的类型元数据指针，赋值给 &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02c2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00706&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_32+&lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//&lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;，即val的地址赋值给 &lt;span class=&#34;hljs-number&#34;&gt;408&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02ca&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00714&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_32+&lt;span class=&#34;hljs-number&#34;&gt;408&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02d2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00722&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.v+&lt;span class=&#34;hljs-number&#34;&gt;240&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x02da&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00730&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.v+&lt;span class=&#34;hljs-number&#34;&gt;248&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出只是地址赋值操作&lt;/p&gt;
&lt;h4 id=&#34;基本类型传递分析&#34;&gt;&lt;a href=&#34;#基本类型传递分析&#34; class=&#34;headerlink&#34; title=&#34;基本类型传递分析&#34;&gt;&lt;/a&gt;基本类型传递分析&lt;/h4&gt;&lt;p&gt;截取 ** printFace(t) ** 汇编代码:&lt;/p&gt;
&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs x86asm&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x046e&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01134&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;$1999&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.t+&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0477&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01143&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;$1999&lt;/span&gt;, (&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x047f&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01151&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       PCDATA  &lt;span class=&#34;hljs-number&#34;&gt;$1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;$0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x047f&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01151&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;NOP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0480&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01152&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;CALL&lt;/span&gt;    runtime&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;convT64(SB)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0485&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01157&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x048a&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01162&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_38+&lt;span class=&#34;hljs-number&#34;&gt;136&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;//类型元数据地址赋值是一样的&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0492&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01170&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       LEAQ    type&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;(SB), &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x0499&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01177&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_37+&lt;span class=&#34;hljs-number&#34;&gt;384&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x04a1&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01185&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;..autotmp_37+&lt;span class=&#34;hljs-number&#34;&gt;392&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x04a9&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01193&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.v+&lt;span class=&#34;hljs-number&#34;&gt;224&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0x04b1&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;01201&lt;/span&gt; (main&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go:&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;)       &lt;span class=&#34;hljs-keyword&#34;&gt;MOVQ&lt;/span&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;AX&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.v+&lt;span class=&#34;hljs-number&#34;&gt;232&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;SP&lt;/span&gt;)&lt;br&gt;&lt;br&gt;//runtime&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;convT64在runtime/iface&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;go下&lt;br&gt;func convT64(val uint64) (x unsafe&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;Pointer) &amp;#123;&lt;br&gt;	if val &amp;lt; uint64(len(staticuint64s)) &amp;#123;&lt;br&gt;		x = unsafe&lt;span class=&#34;hljs-number&#34;&gt;.&lt;/span&gt;Pointer(&amp;amp;staticuint64s[val])&lt;br&gt;	&amp;#125; else &amp;#123;&lt;br&gt;		x = mallocgc(&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;, uint64Type, false)&lt;br&gt;		*(*uint64)(x) = val&lt;br&gt;	&amp;#125;&lt;br&gt;	return&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在runtime/iface.go有一系列的convTXXX方法，用于不同的类型。其主要目的是为了利用缓存，避免频繁的内存分配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;struct { a int}&lt;/strong&gt; 这样的结构也适用于这种情况&lt;/li&gt;
&lt;li&gt;常量的情况，会是一个全局变量的指针赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;interface{}在实际中是一个eface的结构体。&lt;/li&gt;
&lt;li&gt;interface{}更像一个包装类&lt;/li&gt;
&lt;li&gt;主要通过reflect来操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考资料:&lt;br&gt;&lt;a href=&#34;https://lrita.github.io/2017/12/12/golang-asm/&#34;&gt;https://lrita.github.io/2017/12/12/golang-asm/&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2021-04-17T12:59:21.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021-04-16-go-chan-md/</id>
        <title>go channel</title>
        <link rel="alternate" href="http://example.com/2021-04-16-go-chan-md/"/>
        <content type="html">&lt;h3 id=&#34;channel的功能及使用&#34;&gt;&lt;a href=&#34;#channel的功能及使用&#34; class=&#34;headerlink&#34; title=&#34;channel的功能及使用&#34;&gt;&lt;/a&gt;channel的功能及使用&lt;/h3&gt;&lt;p&gt;channel是golang里面实现并发的基础，他主要用于在goroutine之间通信&lt;br&gt;。他与rust中的Channel非常相似，不知道谁模仿谁的。&lt;/p&gt;
&lt;p&gt; channel的使用方式：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//myChan 本身是一个指针，可以随意在函数参数中传递&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//无缓存的chan&lt;/span&gt;&lt;br&gt;myChan := &lt;span class=&#34;hljs-built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//有缓存的chan&lt;/span&gt;&lt;br&gt;myChan := &lt;span class=&#34;hljs-built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//定义只读/写 chan没有意义，一般用于在函数传递中限制chan的行为&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//只写chan&lt;/span&gt;&lt;br&gt;myChan := &lt;span class=&#34;hljs-built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;chan&lt;/span&gt; &amp;lt;- &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//只读chan&lt;/span&gt;&lt;br&gt;myChan := &lt;span class=&#34;hljs-built_in&#34;&gt;make&lt;/span&gt;(&amp;lt;- &lt;span class=&#34;hljs-keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//发送数据到通道中&lt;/span&gt;&lt;br&gt;myChan &amp;lt;- &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//使用阻塞方式从通道中读取数据&lt;/span&gt;&lt;br&gt;myBlockData := &amp;lt;- myChan&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//忽略读取的数据&lt;/span&gt;&lt;br&gt;&amp;lt;-myChan&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//使用非阻塞方式从通道中读取数据,一般使用select而非这种方式&lt;/span&gt;&lt;br&gt;myNoBlockData, ok := &amp;lt;- myChan&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//循环接收数据， 没有数据时会阻塞，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//自己设计条件退出循环,或者调用close(myChan)后也会退出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; data := &lt;span class=&#34;hljs-keyword&#34;&gt;range&lt;/span&gt; myChan &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//关闭chan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;close&lt;/span&gt;(myChan)&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;chan的缓存&#34;&gt;&lt;a href=&#34;#chan的缓存&#34; class=&#34;headerlink&#34; title=&#34;chan的缓存&#34;&gt;&lt;/a&gt;chan的缓存&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;无缓存的情况，当没有chan的读操作取时，chan的数据的写入会阻塞&lt;/li&gt;
&lt;li&gt;无缓存的情况，当没有chan的写操作取时，chan的数据的读入会阻塞&lt;/li&gt;
&lt;li&gt;有缓存的情况，类似于生产者和消费者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;其他注意事项&#34;&gt;&lt;a href=&#34;#其他注意事项&#34; class=&#34;headerlink&#34; title=&#34;其他注意事项&#34;&gt;&lt;/a&gt;其他注意事项&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;给关闭的chan发消息会panic&lt;/li&gt;
&lt;li&gt;从已关闭的chan读消息,读出来的值为chan通道类型的空值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;channel的实现&#34;&gt;&lt;a href=&#34;#channel的实现&#34; class=&#34;headerlink&#34; title=&#34;channel的实现&#34;&gt;&lt;/a&gt;channel的实现&lt;/h3&gt;&lt;p&gt;channel的源码实现在runtime/chan.go下面&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; hchan &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;	qcount   &lt;span class=&#34;hljs-keyword&#34;&gt;uint&lt;/span&gt;           &lt;span class=&#34;hljs-comment&#34;&gt;// total data in the queue&lt;/span&gt;&lt;br&gt;	dataqsiz &lt;span class=&#34;hljs-keyword&#34;&gt;uint&lt;/span&gt;           &lt;span class=&#34;hljs-comment&#34;&gt;// size of the circular queue&lt;/span&gt;&lt;br&gt;	buf      unsafe.Pointer &lt;span class=&#34;hljs-comment&#34;&gt;// points to an array of dataqsiz elements&lt;/span&gt;&lt;br&gt;	elemsize &lt;span class=&#34;hljs-keyword&#34;&gt;uint16&lt;/span&gt;&lt;br&gt;	closed   &lt;span class=&#34;hljs-keyword&#34;&gt;uint32&lt;/span&gt;&lt;br&gt;	elemtype *_type &lt;span class=&#34;hljs-comment&#34;&gt;// element type&lt;/span&gt;&lt;br&gt;	sendx    &lt;span class=&#34;hljs-keyword&#34;&gt;uint&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// send index&lt;/span&gt;&lt;br&gt;	recvx    &lt;span class=&#34;hljs-keyword&#34;&gt;uint&lt;/span&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;// receive index&lt;/span&gt;&lt;br&gt;	recvq    waitq  &lt;span class=&#34;hljs-comment&#34;&gt;// list of recv waiters&lt;/span&gt;&lt;br&gt;	sendq    waitq  &lt;span class=&#34;hljs-comment&#34;&gt;// list of send waiters&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// lock protects all fields in hchan, as well as several&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// fields in sudogs blocked on this channel.&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// Do not change another G&amp;#x27;s status while holding this lock&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// (in particular, do not ready a G), as this can deadlock&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// with stack shrinking.&lt;/span&gt;&lt;br&gt;	lock mutex&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;channel的创建过程&#34;&gt;&lt;a href=&#34;#channel的创建过程&#34; class=&#34;headerlink&#34; title=&#34;channel的创建过程&#34;&gt;&lt;/a&gt;channel的创建过程&lt;/h3&gt;&lt;figure class=&#34;highlight arduino&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs arduino&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;func &lt;span class=&#34;hljs-title&#34;&gt;makechan&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(t *chantype, size &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)&lt;/span&gt; *hchan &lt;/span&gt;&amp;#123;&lt;br&gt;	elem := t.elem&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// compiler checks this but be safe.&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; elem.size &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;makechan: invalid channel element type&amp;quot;&lt;/span&gt;)&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; hchanSize%maxAlign != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; || elem.align &amp;gt; maxAlign &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;makechan: bad alignment&amp;quot;&lt;/span&gt;)&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;br&gt;	mem, overflow := math.&lt;span class=&#34;hljs-built_in&#34;&gt;MulUintptr&lt;/span&gt;(elem.size, &lt;span class=&#34;hljs-built_in&#34;&gt;uintptr&lt;/span&gt;(size))&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; overflow || mem &amp;gt; maxAlloc-hchanSize || size &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;panic&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;plainError&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;makechan: size out of range&amp;quot;&lt;/span&gt;))&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;br&gt;	var c *hchan&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; mem == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;:&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Queue or element size is zero.&lt;/span&gt;&lt;br&gt;		c = (*hchan)(&lt;span class=&#34;hljs-built_in&#34;&gt;mallocgc&lt;/span&gt;(hchanSize, nil, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;))&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Race detector uses this location for synchronization.&lt;/span&gt;&lt;br&gt;		c.buf = c.&lt;span class=&#34;hljs-built_in&#34;&gt;raceaddr&lt;/span&gt;()&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; elem.ptrdata == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;:&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Elements do not contain pointers.&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Allocate hchan and buf in one call.&lt;/span&gt;&lt;br&gt;		c = (*hchan)(&lt;span class=&#34;hljs-built_in&#34;&gt;mallocgc&lt;/span&gt;(hchanSize+mem, nil, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;))&lt;br&gt;		c.buf = &lt;span class=&#34;hljs-built_in&#34;&gt;add&lt;/span&gt;(unsafe.&lt;span class=&#34;hljs-built_in&#34;&gt;Pointer&lt;/span&gt;(c), hchanSize)&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt;:&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Elements contain pointers.&lt;/span&gt;&lt;br&gt;		c = &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt;&lt;/span&gt;(hchan)&lt;br&gt;		c.buf = &lt;span class=&#34;hljs-built_in&#34;&gt;mallocgc&lt;/span&gt;(mem, elem, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;)&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;br&gt;	c.elemsize = &lt;span class=&#34;hljs-built_in&#34;&gt;uint16&lt;/span&gt;(elem.size)&lt;br&gt;	c.elemtype = elem&lt;br&gt;	c.dataqsiz = &lt;span class=&#34;hljs-built_in&#34;&gt;uint&lt;/span&gt;(size)&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;lockInit&lt;/span&gt;(&amp;amp;c.lock, lockRankHchan)&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; debugChan &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;makechan: chan=&amp;quot;&lt;/span&gt;, c, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;; elemsize=&amp;quot;&lt;/span&gt;, elem.size, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;; dataqsiz=&amp;quot;&lt;/span&gt;, size, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;)&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; c&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;先判断容量大小&lt;/li&gt;
&lt;li&gt;计算chan队列需要的缓存大小&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;如果为空队列， 则直接用mallocgc分配一个hchan的对像&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;如果缓存的元素不是指针类型的，则直接用mallocgc分配一整块内存（包括hchan和队列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;元素包含指针，则先在堆上分配一个hchan对像,再用mallocgc分配chan队列的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;mallocgc分两种情况，size较小时直接从P的缓存列表中获取，较大时 (&amp;gt;32 kB)直接在堆上分配&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;channel的缓存&#34;&gt;&lt;a href=&#34;#channel的缓存&#34; class=&#34;headerlink&#34; title=&#34;channel的缓存&#34;&gt;&lt;/a&gt;channel的缓存&lt;/h3&gt;&lt;p&gt;hchan中与缓存有关的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;buf 环形队列的地址&lt;/li&gt;
&lt;li&gt;sendx 环形队列的发送地址&lt;/li&gt;
&lt;li&gt;recvx 环形队列的接受地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据代码可以得面缓存的结构如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://note.youdao.com/yws/public/resource/70e1ba4f25d0499b923cafcb2cfa8c7c/xmlnote/WEBRESOURCE94bf6c743675b23712b98382c174bd89/4832&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;至于为什么会根据元素类型中包含指针来设计不同的结构，我觉得主要原因是考虑gc时会改变指针的地址。&lt;/p&gt;
&lt;h3 id=&#34;chan的发送过程&#34;&gt;&lt;a href=&#34;#chan的发送过程&#34; class=&#34;headerlink&#34; title=&#34;chan的发送过程&#34;&gt;&lt;/a&gt;chan的发送过程&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;chansend&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(c *hchan, ep unsafe.Pointer, block &lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt;, callerpc &lt;span class=&#34;hljs-keyword&#34;&gt;uintptr&lt;/span&gt;)&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	...&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//非阻塞，未关闭，且缓存满了直接返回&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; !block &amp;amp;&amp;amp; c.closed == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; full(c) &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;    ...&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//操作之前先锁住&lt;/span&gt;&lt;br&gt;	lock(&amp;amp;c.lock)&lt;br&gt;    ...&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//从接收队列中取一个接收者，把消息发送给他&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; sg := c.recvq.dequeue(); sg != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;br&gt;		send(c, sg, ep, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; unlock(&amp;amp;c.lock) &amp;#125;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;    ...&lt;br&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;//没有接收者时，队列未满，则入缓存队列&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; c.qcount &amp;lt; c.dataqsiz &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Space is available in the channel buffer. Enqueue the element to send.&lt;/span&gt;&lt;br&gt;		qp := chanbuf(c, c.sendx)&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; raceenabled &amp;#123;&lt;br&gt;			raceacquire(qp)&lt;br&gt;			racerelease(qp)&lt;br&gt;		&amp;#125;&lt;br&gt;		typedmemmove(c.elemtype, qp, ep)&lt;br&gt;		c.sendx++&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; c.sendx == c.dataqsiz &amp;#123;&lt;br&gt;			c.sendx = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;		&amp;#125;&lt;br&gt;		c.qcount++&lt;br&gt;		unlock(&amp;amp;c.lock)&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;    ...&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// 获取与当前的goroutine相关的sudog并入到发送等待队列&lt;/span&gt;&lt;br&gt;	gp := getg()&lt;br&gt;	mysg := acquireSudog()&lt;br&gt;	...&lt;br&gt;	c.sendq.enqueue(mysg)&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//通知P阻塞，并阻塞住&lt;/span&gt;&lt;br&gt;	atomic.Store8(&amp;amp;gp.parkingOnChan, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;	gopark(chanparkcommit, unsafe.Pointer(&amp;amp;c.lock), waitReasonChanSend, traceEvGoBlockSend, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;	...&lt;br&gt;	&lt;br&gt;	releaseSudog(mysg)&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;channel的接收过程&#34;&gt;&lt;a href=&#34;#channel的接收过程&#34; class=&#34;headerlink&#34; title=&#34;channel的接收过程&#34;&gt;&lt;/a&gt;channel的接收过程&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;chanrecv&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(c *hchan, ep unsafe.Pointer, block &lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt;)&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(selected, received &lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	...&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//非阻塞&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//无缓存情况时无发送等待 或 缓存为空&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; !block &amp;amp;&amp;amp; empty(c) &amp;#123;&lt;br&gt;	    &lt;span class=&#34;hljs-comment&#34;&gt;//没关闭，直接返回&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; atomic.Load(&amp;amp;c.closed) == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;&lt;br&gt;		&amp;#125;&lt;br&gt;	     &lt;span class=&#34;hljs-comment&#34;&gt;//关闭，则产生select事件&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; empty(c) &amp;#123;&lt;br&gt;		    ...&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;    ...&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//操作前先锁住&lt;/span&gt;&lt;br&gt;	lock(&amp;amp;c.lock)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//关闭了且缓存为空,产生select事件&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; c.closed != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; c.qcount == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;br&gt;		...&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//从发送等待队列中取出发送者,把数据给ep(接受者数据地址)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; sg := c.sendq.dequeue(); sg != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;br&gt;	    ...&lt;br&gt;		recv(c, sg, ep, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; unlock(&amp;amp;c.lock) &amp;#125;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//没有发送者时，当缓存中有数据时,从缓存中取一个数据&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; c.qcount &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Receive directly from queue&lt;/span&gt;&lt;br&gt;		qp := chanbuf(c, c.recvx)&lt;br&gt;	    ...&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ep != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;br&gt;			typedmemmove(c.elemtype, ep, qp)&lt;br&gt;		&amp;#125;&lt;br&gt;		typedmemclr(c.elemtype, qp)&lt;br&gt;		c.recvx++&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; c.recvx == c.dataqsiz &amp;#123;&lt;br&gt;			c.recvx = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;		&amp;#125;&lt;br&gt;		c.qcount--&lt;br&gt;		unlock(&amp;amp;c.lock)&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//缓存中也没有数据时,获取一个与当前goroutine相关的sudog，并入到接收队列中&lt;/span&gt;&lt;br&gt;	gp := getg()&lt;br&gt;	mysg := acquireSudog()&lt;br&gt;    ...&lt;br&gt;	c.recvq.enqueue(mysg)&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//通知P阻塞，并阻塞住&lt;/span&gt;&lt;br&gt;	atomic.Store8(&amp;amp;gp.parkingOnChan, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;	gopark(chanparkcommit, unsafe.Pointer(&amp;amp;c.lock), waitReasonChanReceive, traceEvGoBlockRecv, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;    ...&lt;br&gt;    阻塞完后，说明有数据来了，产生&lt;span class=&#34;hljs-keyword&#34;&gt;select&lt;/span&gt;事件&lt;br&gt;	releaseSudog(mysg)&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;, !closed&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;chan的关闭过程&#34;&gt;&lt;a href=&#34;#chan的关闭过程&#34; class=&#34;headerlink&#34; title=&#34;chan的关闭过程&#34;&gt;&lt;/a&gt;chan的关闭过程&lt;/h3&gt;&lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs stylus&#34;&gt;func closechan(c *hchan) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//关闭一个空的chan会崩溃&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; c == nil &amp;#123;&lt;br&gt;		panic(plainError(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;close of nil channel&amp;quot;&lt;/span&gt;))&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//操作之前先锁住&lt;/span&gt;&lt;br&gt;	lock(&amp;amp;c.lock)&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//关闭一个关闭的chan也会崩溃&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; c&lt;span class=&#34;hljs-selector-class&#34;&gt;.closed&lt;/span&gt; != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;br&gt;		unlock(&amp;amp;c.lock)&lt;br&gt;		panic(plainError(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;close of closed channel&amp;quot;&lt;/span&gt;))&lt;br&gt;	&amp;#125;&lt;br&gt;    ...&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//设置为关闭&lt;/span&gt;&lt;br&gt;	c&lt;span class=&#34;hljs-selector-class&#34;&gt;.closed&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-selector-tag&#34;&gt;var&lt;/span&gt; glist gList&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// 释放所有的接收者&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;br&gt;		sg := c&lt;span class=&#34;hljs-selector-class&#34;&gt;.recvq&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.dequeue&lt;/span&gt;()&lt;br&gt;	    ...&lt;br&gt;		glist&lt;span class=&#34;hljs-selector-class&#34;&gt;.push&lt;/span&gt;(gp)&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//// 释放所有的发送等待者，他们会panic&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;br&gt;		sg := c&lt;span class=&#34;hljs-selector-class&#34;&gt;.sendq&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.dequeue&lt;/span&gt;()&lt;br&gt;		...&lt;br&gt;		glist&lt;span class=&#34;hljs-selector-class&#34;&gt;.push&lt;/span&gt;(gp)&lt;br&gt;	&amp;#125;&lt;br&gt;	unlock(&amp;amp;c.lock)&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// Ready all Gs now that we&amp;#x27;ve dropped the channel lock.&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; !glist&lt;span class=&#34;hljs-selector-class&#34;&gt;.empty&lt;/span&gt;() &amp;#123;&lt;br&gt;		gp := glist&lt;span class=&#34;hljs-selector-class&#34;&gt;.pop&lt;/span&gt;()&lt;br&gt;		gp&lt;span class=&#34;hljs-selector-class&#34;&gt;.schedlink&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;		goready(gp, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


</content>
        <updated>2021-04-16T14:06:41.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018-11-20-rust-static/</id>
        <title>rust static详解</title>
        <link rel="alternate" href="http://example.com/2018-11-20-rust-static/"/>
        <content type="html">&lt;h3 id=&#34;static-语法&#34;&gt;&lt;a href=&#34;#static-语法&#34; class=&#34;headerlink&#34; title=&#34;static 语法&#34;&gt;&lt;/a&gt;static 语法&lt;/h3&gt;&lt;figure class=&#34;highlight ada&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ada&#34;&gt;static mut? IDENTIFER: &lt;span class=&#34;hljs-keyword&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;(= &lt;/span&gt;Expresssion)?;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中mut可有可无，Expresssion为表达式，可以没有。&lt;/p&gt;
&lt;h3 id=&#34;static与常量有区别&#34;&gt;&lt;a href=&#34;#static与常量有区别&#34; class=&#34;headerlink&#34; title=&#34;static与常量有区别&#34;&gt;&lt;/a&gt;static与常量有区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;static有自己的内存地址，其生命周期是‘static的，常量没有&lt;/li&gt;
&lt;li&gt;所有的对static item的引用指向同一个地址，而每个常量都有自己的地址&lt;/li&gt;
&lt;li&gt;static的类型必须是Sync的，跨线程访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mut-static&#34;&gt;&lt;a href=&#34;#mut-static&#34; class=&#34;headerlink&#34; title=&#34;mut static&#34;&gt;&lt;/a&gt;mut static&lt;/h3&gt;&lt;p&gt;如果一个static item是mut的，并发访问时可能会有问题，所以对他的引用是unsafe的。我们要自己确保他的正确性。&lt;/p&gt;
&lt;h3 id=&#34;static-变量&#34;&gt;&lt;a href=&#34;#static-变量&#34; class=&#34;headerlink&#34; title=&#34;static 变量&#34;&gt;&lt;/a&gt;static 变量&lt;/h3&gt;&lt;p&gt;按照static的语法定义变量时经常遇到这样的错误:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;calls in statics are limited to constant functions, tuple structs and tuple variants&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说上面的Expresssion只是条件的。只能是常量函数，tuple结构等。而不能像Java语言一样 static Object STATIC_OBJ = new Object();&lt;/p&gt;
&lt;p&gt;其中主要的区别在于是static的初始化必须是在编译期可确定的。也就是说其内存大小是在编译期确定的，而Java是在运行时。&lt;/p&gt;
&lt;h3 id=&#34;lazy-static&#34;&gt;&lt;a href=&#34;#lazy-static&#34; class=&#34;headerlink&#34; title=&#34;lazy_static&#34;&gt;&lt;/a&gt;lazy_static&lt;/h3&gt;&lt;p&gt;由于rust static在编译期确定大小的特性，一些rust程序员在编写代码时产生了诸多不便，就有了&lt;a href=&#34;https://github.com/rust-lang-nursery/lazy-static.rs&#34;&gt;lazy_static&lt;/a&gt;这个库。&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;lazy_static! &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;ref&lt;/span&gt; HASHMAP: HashMap&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;u32&lt;/span&gt;, &amp;amp;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;static&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;&amp;gt; = &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; m = HashMap::new();&lt;br&gt;        m.insert(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;);&lt;br&gt;        m.insert(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;);&lt;br&gt;        m.insert(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;);&lt;br&gt;        m&lt;br&gt;    &amp;#125;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lazy_static是第一次使用时调用初始化，相当于把初始化挪到了运行时。&lt;/p&gt;
&lt;h3 id=&#34;lazy-mut&#34;&gt;&lt;a href=&#34;#lazy-mut&#34; class=&#34;headerlink&#34; title=&#34;lazy_mut&#34;&gt;&lt;/a&gt;lazy_mut&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://docs.rs/lazy_mut/0.1.0/lazy_mut/&#34;&gt;lazy_mut&lt;/a&gt;是用来解决变量延迟初始化的, 也包括static mut。&lt;/p&gt;
</content>
        <updated>2018-11-22T12:46:11.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018-11-20-rust-tokio0-1/</id>
        <title>tokio0.1分析</title>
        <link rel="alternate" href="http://example.com/2018-11-20-rust-tokio0-1/"/>
        <content type="html">&lt;h1 id=&#34;关于-tokio&#34;&gt;&lt;a href=&#34;#关于-tokio&#34; class=&#34;headerlink&#34; title=&#34;关于 tokio&#34;&gt;&lt;/a&gt;关于 tokio&lt;/h1&gt;&lt;h2 id=&#34;what-is-tokio&#34;&gt;&lt;a href=&#34;#what-is-tokio&#34; class=&#34;headerlink&#34; title=&#34;what is tokio&#34;&gt;&lt;/a&gt;what is tokio&lt;/h2&gt;&lt;p&gt;tokio是一个rust语言的异步编程框架，是一个基于事件驱动和非阻塞I/O的框架。在上层设计上，它提供了一些主要组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程，任务窃取(work-stealing)的task &lt;a href=&#34;https://tokio-rs.github.io/tokio/tokio/runtime/index.html&#34;&gt;scheduler&lt;/a&gt; (runtime)&lt;/li&gt;
&lt;li&gt;由操作系统的事件队列（epoll,kqueue,IOCP等）支撑的&lt;a href=&#34;https://docs.rs/tokio/0.1.1/tokio/reactor/index.html&#34;&gt;reactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;异步&lt;a href=&#34;https://docs.rs/tokio/0.1/tokio/net/index.html&#34;&gt;TCP和UDP&lt;/a&gt;套接字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tokio-优势&#34;&gt;&lt;a href=&#34;#tokio-优势&#34; class=&#34;headerlink&#34; title=&#34;tokio 优势&#34;&gt;&lt;/a&gt;tokio 优势&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;零成本抽象，tokio是基于futures的。&lt;/li&gt;
&lt;li&gt;并发，tokio提供了多线程，work-stealing,scheduler。在现代多核cpu的情况下你可以充分利用他们提高应用的性能。&lt;/li&gt;
&lt;li&gt;非阻塞，高性能，当涉及到网络时，tokio会非常有效的使用系统，如linux上的&lt;a href=&#34;http://man7.org/linux/man-pages/man7/epoll.7.html&#34;&gt;epoll&lt;/a&gt;,bsd平台的&lt;a href=&#34;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;sektion=2&#34;&gt;kqueue&lt;/a&gt;,Windows的&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/desktop/fileio/i-o-completion-ports&#34;&gt;I/O completion ports&lt;/a&gt;,他们可以在单线程中进行多路复用，批量接收系统通知，减少系统调用。&lt;blockquote&gt;
&lt;p&gt; Because Tokio uses a poll based model, the problem mostly just goes away. Producers are lazy by default. They will not produce any data unless the consumer asks them to. This is built into Tokio’s foundation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reliable，api清晰易用，使用rust不会有太多的内存问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BackPressure，在基于push的系统中，当生产者生产数据的速度超过了消费者消费的速度，数据就会暂存在内存中。除非生产者停止生产，否则系统就会因为内存耗尽而崩溃。消费者通知生产者放慢生产的能力就是BackPressure。在tokio中利用&lt;a href=&#34;https://tokio.rs/docs/getting-started/futures/#poll-based-futures&#34;&gt;poll&lt;/a&gt;的方式很好的解决了这个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cancellation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because of Tokio’s poll based model, computations do no work unless they are polled. Dependents of that computation hold a future representing the result of that computation. If the result is no longer needed, the future is dropped. At this point, the computation will no longer be polled and thus perform no more work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to Rust’s ownership model, the computation is able to implement drop handles to detect the future being dropped. This allows it to perform any necessary cleanup work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;轻量级框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有垃圾回收&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tokio的结构&#34;&gt;&lt;a href=&#34;#tokio的结构&#34; class=&#34;headerlink&#34; title=&#34;tokio的结构&#34;&gt;&lt;/a&gt;tokio的结构&lt;/h2&gt;&lt;p&gt;结构总体抽象为Futures,Tasks和Executor,并提供了提供了Timer等基础设施。tokio快速，可靠，且可扩展。&lt;br&gt;Tokio 是一个事件驱动的非阻塞I/O框架，用于rust编程语言编写异步应用。在高层设计上，这些组件提供了很好的抽象，大大简化了编码工作。&lt;/p&gt;
&lt;h3 id=&#34;tokio的依赖&#34;&gt;&lt;a href=&#34;#tokio的依赖&#34; class=&#34;headerlink&#34; title=&#34;tokio的依赖&#34;&gt;&lt;/a&gt;tokio的依赖&lt;/h3&gt;&lt;p&gt;tokio主要的依赖有futures,mio(基于异步事件通知的高性能I/O库)&lt;/p&gt;
&lt;h4 id=&#34;mio&#34;&gt;&lt;a href=&#34;#mio&#34; class=&#34;headerlink&#34; title=&#34;mio&#34;&gt;&lt;/a&gt;mio&lt;/h4&gt;&lt;p&gt;参见mio模块&lt;/p&gt;
&lt;h4 id=&#34;future&#34;&gt;&lt;a href=&#34;#future&#34; class=&#34;headerlink&#34; title=&#34;future&#34;&gt;&lt;/a&gt;future&lt;/h4&gt;&lt;p&gt;参见future模块&lt;/p&gt;
&lt;h3 id=&#34;tokio分析&#34;&gt;&lt;a href=&#34;#tokio分析&#34; class=&#34;headerlink&#34; title=&#34;tokio分析&#34;&gt;&lt;/a&gt;tokio分析&lt;/h3&gt;&lt;p&gt;tokio主要分clock,codec,executor,fs,io,net,reactor,runtime,timer这几个模块。这里挑几个主要介绍。&lt;/p&gt;
&lt;h4 id=&#34;executor&#34;&gt;&lt;a href=&#34;#executor&#34; class=&#34;headerlink&#34; title=&#34;executor&#34;&gt;&lt;/a&gt;executor&lt;/h4&gt;&lt;p&gt;executor的作用是执行任务。在tokio执行模型中，futures是懒模式，也就是说当一个future被创建时是不会执行的，为了让他工作，我们要把化丢到一个executor里。在executor里的future就叫做task。&lt;br&gt;当task被通知时，exectuor确保future的poll方法会被执行。executor一般有有两种模型，单线程和多线程，在runtime模块中都有实现。&lt;/p&gt;
&lt;h5 id=&#34;DefaultExecutor&#34;&gt;&lt;a href=&#34;#DefaultExecutor&#34; class=&#34;headerlink&#34; title=&#34;DefaultExecutor&#34;&gt;&lt;/a&gt;DefaultExecutor&lt;/h5&gt;&lt;p&gt;&lt;a href=&#34;https://docs.rs/tokio-executor/0.1.5/src/tokio_executor/global.rs.html#18-20&#34;&gt;DefaultExecutor&lt;/a&gt;实现了&lt;a href=&#34;https://docs.rs/tokio/0.1/tokio/executor/trait.Executor.html&#34;&gt;tokio::executor::Executor&lt;/a&gt;,同样也实现了future的Executor trait这样就可以和futures库联系起来。&lt;br&gt;我们来分析一下他的源码：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Debug, Clone)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;DefaultExecutor&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    _dummy: (),&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt; DefaultExecutor &amp;#123;&lt;br&gt;   &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;current&lt;/span&gt;&lt;/span&gt;() -&amp;gt; DefaultExecutor &amp;#123;&lt;br&gt;        DefaultExecutor &amp;#123;&lt;br&gt;            _dummy: (),&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;#[inline]&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;with_current&lt;/span&gt;&lt;/span&gt;&amp;lt;F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Executor) -&amp;gt; R, R&amp;gt;(f: F) -&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;R&amp;gt; &amp;#123;&lt;br&gt;        EXECUTOR.with(|current_executor| &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;match&lt;/span&gt; current_executor.replace(State::Active) &amp;#123;&lt;br&gt;                State::Ready(executor_ptr) =&amp;gt; &amp;#123;&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; executor = &lt;span class=&#34;hljs-keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; *executor_ptr &amp;#125;;&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; result = f(executor);&lt;br&gt;                    current_executor.set(State::Ready(executor_ptr));&lt;br&gt;                    &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(result)&lt;br&gt;                &amp;#125;,&lt;br&gt;                State::Empty | State::Active =&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;,&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;)&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Clone, Copy)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;State&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// default executor not defined&lt;/span&gt;&lt;br&gt;    Empty,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// default executor is defined and ready to be used&lt;/span&gt;&lt;br&gt;    Ready(*&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Executor),&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// default executor is currently active (used to detect recursive calls)&lt;/span&gt;&lt;br&gt;    Active&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/// Thread-local tracking the current executor&lt;/span&gt;&lt;br&gt;thread_local!(&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; EXECUTOR: Cell&amp;lt;State&amp;gt; = Cell::new(State::Empty));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从源码看DefaultExecutor并没有具体的实现，只是一个空壳。每个线程都有一个指针指向一个设置的Executor，使用的是线程本地变量保存。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;那么如何设置该Executor呢？&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href=&#34;https://docs.rs/tokio-executor/0.1.5/src/tokio_executor/global.rs.html#158-194&#34;&gt;with_default&lt;/a&gt;方法，他有一个&lt;a href=&#34;https://docs.rs/crate/tokio-executor/0.1.5/source/src/enter.rs&#34;&gt;Enter&lt;/a&gt;类型的变量，代表的是executor的上下文&lt;/p&gt;
&lt;h2 id=&#34;Reactor&#34;&gt;&lt;a href=&#34;#Reactor&#34; class=&#34;headerlink&#34; title=&#34;Reactor&#34;&gt;&lt;/a&gt;Reactor&lt;/h2&gt;&lt;p&gt;reactor主要用来管理Event loop,reactor用来接收从操作系统的事件(epoll,kqueue,IOCP,…),然后转发给等待的tasks。reactor可以看做是操作系统与futures模型之间的桥梁。&lt;br&gt;reactor从操作系统接收事件后会通知到executor。&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;&lt;a href=&#34;#example&#34; class=&#34;headerlink&#34; title=&#34;example&#34;&gt;&lt;/a&gt;example&lt;/h3&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; tokio::prelude::*;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; tokio::net::TcpStream;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; addr = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;93.184.216.34:9243&amp;quot;&lt;/span&gt;.parse().unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; connect_future = TcpStream::connect(&amp;amp;addr);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; task = connect_future&lt;br&gt;    .and_then(|socket| &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;println!&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;successfully connected&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-literal&#34;&gt;Ok&lt;/span&gt;(())&lt;br&gt;    &amp;#125;)&lt;br&gt;    .map_err(|e| &lt;span class=&#34;hljs-built_in&#34;&gt;println!&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;failed to connect; err=&amp;#123;:?&amp;#125;&amp;quot;&lt;/span&gt;, e));&lt;br&gt;&lt;br&gt;tokio::run(task);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用connect方法后，会立即返回一个ConnectFuture，并不会阻塞当前线程。&lt;br&gt;run方法执行后，会把task放到threadpool中，task会执行一次返回NotReady,此时会放回threadpool等待通知再次执行。&lt;br&gt;当tcp连接建立后，reactor会从操作系统收到相应的事件，并通知threadpool task可以再次执行。&lt;/p&gt;
&lt;p&gt;以上代码并没有涉及到Reactor，是因为他包装在了run方法内，我们稍后分析。&lt;/p&gt;
&lt;h3 id=&#34;reactor源码分析&#34;&gt;&lt;a href=&#34;#reactor源码分析&#34; class=&#34;headerlink&#34; title=&#34;reactor源码分析&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://docs.rs/tokio-reactor/0.1.6/src/tokio_reactor/lib.rs.html#88-96&#34;&gt;reactor源码分析&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Reactor&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// Reuse the `mio::Events` value across calls to poll.&lt;/span&gt;&lt;br&gt;    events: mio::Events,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// State shared between the reactor and the handles.&lt;/span&gt;&lt;br&gt;    inner: Arc&amp;lt;Inner&amp;gt;,&lt;br&gt;&lt;br&gt;    _wakeup_registration: mio::Registration,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Inner&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// The underlying system event queue.&lt;/span&gt;&lt;br&gt;    io: mio::Poll,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// ABA guard counter&lt;/span&gt;&lt;br&gt;    next_aba_guard: AtomicUsize,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// Dispatch slabs for I/O and futures events&lt;/span&gt;&lt;br&gt;    io_dispatch: RwLock&amp;lt;Slab&amp;lt;ScheduledIo&amp;gt;&amp;gt;,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// Used to wake up the reactor from a call to `turn`&lt;/span&gt;&lt;br&gt;    wakeup: mio::SetReadiness&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ScheduledIo&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    aba_guard: &lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;,&lt;br&gt;    readiness: AtomicUsize,&lt;br&gt;    reader: AtomicTask,&lt;br&gt;    writer: AtomicTask,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们看到了熟悉的东西，mio::Events和mio::Poll这两个。&lt;br&gt;Reactor中有几个主要的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;handle –&amp;gt; Handle 返回该Reactor的一个句柄&lt;figure class=&#34;highlight dts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs dts&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Clone)]&lt;/span&gt;&lt;br&gt;struct &lt;span class=&#34;hljs-class&#34;&gt;HandlePriv &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;    inner:&lt;/span&gt; Weak&lt;span class=&#34;hljs-params&#34;&gt;&amp;lt;Inner&amp;gt;&lt;/span&gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;set_fallback&lt;/li&gt;
&lt;li&gt;turn&lt;br&gt; 从源码中我们可以看到他调用了mio::Poll的poll方法，&lt;strong&gt;并做了事件分发&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;is_idle&lt;/li&gt;
&lt;li&gt;background –&amp;gt; Result&amp;lt;Background,Error&amp;gt;&lt;br&gt; 在一个后台线程运行该Reactor,通过返回的Background可以控制Reactor。&lt;/li&gt;
&lt;li&gt;impl Park&lt;br&gt; 阻塞当前线程，等待事件发生。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Reactor的Park与UnPark&#34;&gt;&lt;a href=&#34;#Reactor的Park与UnPark&#34; class=&#34;headerlink&#34; title=&#34;Reactor的Park与UnPark&#34;&gt;&lt;/a&gt;Reactor的Park与UnPark&lt;/h4&gt;&lt;p&gt;使用的是mio::Registration中机制&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;park&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; io::&lt;span class=&#34;hljs-built_in&#34;&gt;Result&lt;/span&gt;&amp;lt;()&amp;gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.turn(&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;)?;&lt;br&gt;        &lt;span class=&#34;hljs-literal&#34;&gt;Ok&lt;/span&gt;(())&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//turn调用 的poll方法    &lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;unpark&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;ref&lt;/span&gt; h) = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.inner &amp;#123;&lt;br&gt;            h.wakeup();&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;wakeup&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(handle) = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.as_priv() &amp;#123;&lt;br&gt;            handle.wakeup();&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;wakeup&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(inner) = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.inner() &amp;#123;&lt;br&gt;            inner.wakeup.set_readiness(mio::Ready::readable()).unwrap();&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;Registration&#34;&gt;&lt;a href=&#34;#Registration&#34; class=&#34;headerlink&#34; title=&#34;Registration&#34;&gt;&lt;/a&gt;Registration&lt;/h4&gt;&lt;p&gt;一种注册到Reactor中的IO资源，他可以从Reactor接受任务通知。通过register把Evented注册到Reactor中。一个Registeration代表两个stream，一个用于读另一个用于写。&lt;/p&gt;
&lt;h5 id=&#34;Registration到Reactor的注册过程：&#34;&gt;&lt;a href=&#34;#Registration到Reactor的注册过程：&#34; class=&#34;headerlink&#34; title=&#34;Registration到Reactor的注册过程：&#34;&gt;&lt;/a&gt;Registration到Reactor的注册过程：&lt;/h5&gt;&lt;p&gt;1.Registration的&lt;a href=&#34;https://docs.rs/tokio-reactor/0.1.6/src/tokio_reactor/registration.rs.html#114-117&#34;&gt;register&lt;/a&gt;方法中执行register2方法&lt;br&gt;2. register2中199行根据Evented和Reactor的handle构造了一个Registration的Inner&lt;br&gt;3. 我们可以下构造过程代码419行，425行调用了Reactor中的方法 &lt;a href=&#34;https://docs.rs/tokio-reactor/0.1.6/src/tokio_reactor/lib.rs.html#636-663&#34;&gt;add_source&lt;/a&gt;&lt;br&gt;4. add_source方法的657行调用了poll的注册方法&lt;/p&gt;
&lt;h5 id=&#34;Registration的通知过程&#34;&gt;&lt;a href=&#34;#Registration的通知过程&#34; class=&#34;headerlink&#34; title=&#34;Registration的通知过程&#34;&gt;&lt;/a&gt;Registration的通知过程&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Reactor的&lt;a href=&#34;https://docs.rs/tokio-reactor/0.1.6/src/tokio_reactor/lib.rs.html#324-327&#34;&gt;turn&lt;/a&gt;方法为入口,他调用了poll方法。&lt;/li&gt;
&lt;li&gt;跳到349行poll方法，352行调用了mio::Poll的poll方法，这里会阻塞，返回事件后370判断是内部唤醒事件还是其他事件，其他事件调用dispatch方法。&lt;/li&gt;
&lt;li&gt;388行 dispatch方法先获取读锁，用token为key取出相应的task想关记录，匹配事件是否对的上，最后调用task.notify()。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; Registration中有两个重要的方法，poll_read_ready,poll_write_ready，他们读取Reactor相关的事件。利用这两个函数可以生成两个Future。&lt;/p&gt;
&lt;h4 id=&#34;PollEvented&#34;&gt;&lt;a href=&#34;#PollEvented&#34; class=&#34;headerlink&#34; title=&#34;PollEvented&#34;&gt;&lt;/a&gt;PollEvented&lt;/h4&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PollEvented&lt;/span&gt;&lt;/span&gt;&amp;lt;E: Evented&amp;gt; &amp;#123;&lt;br&gt;    io: &lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;E&amp;gt;,&lt;br&gt;    inner: Inner,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Inner&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    registration: Registration,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// Currently visible read readiness&lt;/span&gt;&lt;br&gt;    read_readiness: AtomicUsize,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// Currently visible write readiness&lt;/span&gt;&lt;br&gt;    write_readiness: AtomicUsize,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从代码可以看出了，他关联了Registration。他进一步包装了Evented和Registration。PollEvented实现了Read AsyncRead和Write AsyncWrite trait,对上层使用更友好了。&lt;/p&gt;
&lt;h2 id=&#34;timer&#34;&gt;&lt;a href=&#34;#timer&#34; class=&#34;headerlink&#34; title=&#34;timer&#34;&gt;&lt;/a&gt;timer&lt;/h2&gt;&lt;p&gt;时间相关的工具模块，该模块主要包括以下几个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delay,一个future在指定的时间后完成&lt;/li&gt;
&lt;li&gt;Interval ,一个Stream,每隔固定的时间产生一个值，值为时间从开始到现在的时间点。&lt;/li&gt;
&lt;li&gt;Timeout，包装了一个future或Stream，设置一个上限时间，如果在指定的时间内不能完成则会被cancelled或返回error。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.rs/tokio/0.1/tokio/timer/delay_queue/struct.DelayQueue.html&#34;&gt;DelayQueue&lt;/a&gt;, 一个队列，通过insert,inser_at等函数可以操作这个队列。也可以当做一个Stream，当item的请求过期后就会被返回。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.rs/tokio-timer/0.2.7/tokio_timer/timer/struct.Timer.html&#34;&gt;Timer&lt;/a&gt; Timer跟踪管理时间的状态，当Delay的deadline到时会通知它。&lt;br&gt;创建一个Timer,使用park方法阻塞当前线程，通过handle()获取Timer的Handle, Handle可以用于创建Delay&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;runtime&#34;&gt;&lt;a href=&#34;#runtime&#34; class=&#34;headerlink&#34; title=&#34;runtime&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://docs.rs/tokio/0.1/tokio/runtime/index.html&#34;&gt;runtime&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用tokio时需要Reactor,executor,timer这三者的支持。我们可以手动的把这三者关联起来，但可能比较复杂。如果不想麻烦，我们可以用runtime来把这三者串联并管理起来。&lt;/p&gt;
&lt;p&gt;创建runtime时内部做了以下工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开起一个后台线程执行Reactor,而0.1.11版本以后改为每个工作线程有一个Reactor&lt;/li&gt;
&lt;li&gt;开起一个ThreadPoll用于执行futures&lt;/li&gt;
&lt;li&gt;每个工作线程运行一个Timer实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;runtime的使用&#34;&gt;&lt;a href=&#34;#runtime的使用&#34; class=&#34;headerlink&#34; title=&#34;runtime的使用&#34;&gt;&lt;/a&gt;runtime的使用&lt;/h3&gt;&lt;h4 id=&#34;exapmple&#34;&gt;&lt;a href=&#34;#exapmple&#34; class=&#34;headerlink&#34; title=&#34;exapmple&#34;&gt;&lt;/a&gt;exapmple&lt;/h4&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; tokio::net::TcpListener;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; listener = TcpListener::bind(&amp;amp;addr).unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; server = listener.incoming()&lt;br&gt;    .map_err(|e| &lt;span class=&#34;hljs-built_in&#34;&gt;println!&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;error = &amp;#123;:?&amp;#125;&amp;quot;&lt;/span&gt;, e))&lt;br&gt;    .for_each(|socket| &amp;#123;&lt;br&gt;        tokio::spawn(process(socket))&lt;br&gt;    &amp;#125;);&lt;br&gt;&lt;br&gt;tokio::run(server);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以使用run代替自己创建runtime，run方法会阻塞当前线程直到runtime运行完所有任务。&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; tokio::runtime::Runtime;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; tokio::net::TcpListener;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; listener = TcpListener::bind(&amp;amp;addr).unwrap();&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; server = listener.incoming()&lt;br&gt;    .map_err(|e| &lt;span class=&#34;hljs-built_in&#34;&gt;println!&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;error = &amp;#123;:?&amp;#125;&amp;quot;&lt;/span&gt;, e))&lt;br&gt;    .for_each(|socket| &amp;#123;&lt;br&gt;        tokio::spawn(process(socket))&lt;br&gt;    &amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Create the runtime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; rt = Runtime::new().unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Spawn the server task&lt;/span&gt;&lt;br&gt;rt.spawn(server);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Wait until the runtime becomes idle and shut it down.&lt;/span&gt;&lt;br&gt;rt.shutdown_on_idle()&lt;br&gt;    .wait().unwrap();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们也可以自己创建runtime，并调用spawn方法，他会把future放到配置的threadpoll中去运行并立即返回。shutdown_on_idle方法会阻塞直到所有任务运行完并关闭。&lt;/p&gt;
&lt;h4 id=&#34;runtime的配置&#34;&gt;&lt;a href=&#34;#runtime的配置&#34; class=&#34;headerlink&#34; title=&#34;runtime的配置&#34;&gt;&lt;/a&gt;runtime的配置&lt;/h4&gt;&lt;p&gt;ThreadPool使用了work-stealing策略，ThreadPool默认每个cpu core开起一个工作线程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过Runtime的new方法生成默认配置的&lt;/li&gt;
&lt;li&gt;通过&lt;a href=&#34;https://docs.rs/tokio/0.1/tokio/runtime/struct.Builder.html&#34;&gt;Builder&lt;/a&gt;来构造一个满足你想要的配置的Runtime。&lt;br&gt;主要的配置参数有clock,核心线程数，最大阻塞线程数，线程空闲时的存活时间，线程名，线程栈大小等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;runtime分析&#34;&gt;&lt;a href=&#34;#runtime分析&#34; class=&#34;headerlink&#34; title=&#34;runtime分析&#34;&gt;&lt;/a&gt;runtime分析&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://docs.rs/tokio/0.1/src/tokio/runtime/mod.rs.html#221-490&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Debug)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Runtime&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    inner: &lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;Inner&amp;gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Debug)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Inner&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// A handle to one of the per-worker reactors.&lt;/span&gt;&lt;br&gt;    reactor: Handle,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/// Task execution pool.&lt;/span&gt;&lt;br&gt;    pool: threadpool::ThreadPool,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从代码可以看出Runtime封装了一个线程池和reactor，但这个reactor在0.1.11版本后就没有用了。&lt;br&gt;下面主要分析一下future的执行过程：&lt;/p&gt;
&lt;p&gt;1.以Runtime 的&lt;a href=&#34;https://docs.rs/tokio/0.1/src/tokio/runtime/mod.rs.html#342-347&#34;&gt;spawn&lt;/a&gt;方法为入口,调用了threadpool的sender方法返回一个&lt;a href=&#34;https://tokio-rs.github.io/tokio/tokio_threadpool/struct.Sender.html&#34;&gt;Sender&lt;/a&gt;，并调用其&lt;a href=&#34;https://tokio-rs.github.io/tokio/src/tokio_threadpool/sender.rs.html#128-133&#34;&gt;spawn&lt;/a&gt;方法。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Sender是一个Executor,spawn中主要做了三件事：&lt;ol&gt;
&lt;li&gt;准备工作，容量及状态检查&lt;/li&gt;
&lt;li&gt;new 一个Task&lt;/li&gt;
&lt;li&gt;调用pool的&lt;a href=&#34;https://docs.rs/crate/tokio-threadpool/0.1.8/source/src/pool/mod.rs&#34;&gt;submit_to_random&lt;/a&gt;方法，把这个task随机提交到某个worker中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来我们找到工作线程的&lt;a href=&#34;https://docs.rs/crate/tokio-threadpool/0.1.8/source/src/pool/mod.rs&#34;&gt;入口&lt;/a&gt;，Pool的spawn_thread方法，里面调用 了worker的do_run:&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;crate&lt;/span&gt;) &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;do_run&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// Create another worker... It&amp;#x27;s ok, this is just a new type around&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// `Pool` that is expected to stay on the current thread.&lt;/span&gt;&lt;br&gt;        CURRENT_WORKER.with(|c| &amp;#123;&lt;br&gt;            c.set(&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; _);&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inner = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.inner.clone();&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; sender = Sender &amp;#123; inner &amp;#125;;&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// Enter an execution context&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; enter = tokio_executor::enter().unwrap();&lt;br&gt;&lt;br&gt;            tokio_executor::with_default(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; sender, &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; enter, |enter| &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;ref&lt;/span&gt; callback) = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.inner.config.around_worker &amp;#123;&lt;br&gt;                    callback.call(&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;, enter);&lt;br&gt;                &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.run();&lt;br&gt;                &amp;#125;&lt;br&gt;            &amp;#125;);&lt;br&gt;        &amp;#125;);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// Can&amp;#x27;t be in blocking mode and finalization mode&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;debug_assert!&lt;/span&gt;(!&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.is_blocking.get() || !&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.should_finalize.get());&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.is_blocking.get()&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;来看一下  &lt;strong&gt;tokio_reactor::with_default:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;thread_local!(&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; CURRENT_REACTOR: RefCell&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;HandlePriv&amp;gt;&amp;gt; = RefCell::new(&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;));&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;with_default&lt;/span&gt;&lt;/span&gt;&amp;lt;F, R&amp;gt;(handle: &amp;amp;Handle, enter: &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Enter, f: F) -&amp;gt; R&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Enter) -&amp;gt; R&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Ensure that the executor is removed from the thread-local context&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// when leaving the scope. This handles cases that involve panicking.&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Reset&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Drop&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; Reset &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;drop&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;            CURRENT_REACTOR.with(|current| &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; current = current.borrow_mut();&lt;br&gt;                *current = &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;;&lt;br&gt;            &amp;#125;);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// This ensures the value for the current reactor gets reset even if there&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// is a panic.&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; _r = Reset;&lt;br&gt;&lt;br&gt;    CURRENT_REACTOR.with(|current| &amp;#123;&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; current = current.borrow_mut();&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;assert!&lt;/span&gt;(current.is_none(), &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;default Tokio reactor already set \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;                    for execution context&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; handle = &lt;span class=&#34;hljs-keyword&#34;&gt;match&lt;/span&gt; handle.as_priv() &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(handle) =&amp;gt; handle,&lt;br&gt;                &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt; =&amp;gt; &amp;#123;&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;panic!&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;`handle` does not reference a reactor&amp;quot;&lt;/span&gt;);&lt;br&gt;                &amp;#125;&lt;br&gt;            &amp;#125;;&lt;br&gt;&lt;br&gt;            *current = &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(handle.clone());&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        f(enter)&lt;br&gt;    &amp;#125;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际是调用了里面的闭包，根据config.around_worker里是否设置了callback来决定是调用callback还是调用了run方法。我们找到around_worker的设置地方，在Runtime的Builder的build方法中：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; pool = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.threadpool_builder&lt;br&gt;            .around_worker(&lt;span class=&#34;hljs-keyword&#34;&gt;move&lt;/span&gt; |w, enter| &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; index = w.id().to_usize();&lt;br&gt;&lt;br&gt;                tokio_reactor::with_default(&amp;amp;reactor_handles[index], enter, |enter| &amp;#123;&lt;br&gt;                    clock::with_default(&amp;amp;clock, enter, |enter| &amp;#123;&lt;br&gt;                        timer::with_default(&amp;amp;timer_handles[index], enter, |_| &amp;#123;&lt;br&gt;                            w.run();&lt;br&gt;                        &amp;#125;);&lt;br&gt;                    &amp;#125;)&lt;br&gt;                &amp;#125;);&lt;br&gt;            &amp;#125;)&lt;br&gt;        ..............&lt;br&gt;            .build();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;来看一下 &lt;strong&gt;clock::with_default 与上面同样的套路：&lt;/strong&gt;&lt;br&gt; &lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt; thread_local!(&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; CLOCK: Cell&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;*&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; Clock&amp;gt;&amp;gt; = Cell::new(&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;));&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;with_default&lt;/span&gt;&lt;/span&gt;&amp;lt;F, R&amp;gt;(clock: &amp;amp;Clock, enter: &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Enter, f: F) -&amp;gt; R&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Enter) -&amp;gt; R&lt;br&gt;&amp;#123;&lt;br&gt;    CLOCK.with(|cell| &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;assert!&lt;/span&gt;(cell.get().is_none(), &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;default clock already set for execution context&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// Ensure that the clock is removed from the thread-local context&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// when leaving the scope. This handles cases that involve panicking.&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Reset&lt;/span&gt;&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt;(&amp;amp;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; Cell&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;*&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; Clock&amp;gt;&amp;gt;);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Drop&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; Reset&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;drop&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;.set(&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; _reset = Reset(cell);&lt;br&gt;&lt;br&gt;        cell.set(&lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(clock &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; Clock));&lt;br&gt;&lt;br&gt;        f(enter)&lt;br&gt;    &amp;#125;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再找到 &lt;strong&gt;timer::with_default也是同样的套路：&lt;/strong&gt;&lt;br&gt; &lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt; thread_local!(&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; CURRENT_TIMER: RefCell&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;HandlePriv&amp;gt;&amp;gt; = RefCell::new(&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;));&lt;br&gt; &lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;with_default&lt;/span&gt;&lt;/span&gt;&amp;lt;F, R&amp;gt;(handle: &amp;amp;Handle, enter: &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Enter, f: F) -&amp;gt; R&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; Enter) -&amp;gt; R&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Ensure that the timer is removed from the thread-local context&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// when leaving the scope. This handles cases that involve panicking.&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Reset&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Drop&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; Reset &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;drop&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;            CURRENT_TIMER.with(|current| &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; current = current.borrow_mut();&lt;br&gt;                *current = &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;;&lt;br&gt;            &amp;#125;);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// This ensures the value for the current timer gets reset even if there is&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// a panic.&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; _r = Reset;&lt;br&gt;&lt;br&gt;    CURRENT_TIMER.with(|current| &amp;#123;&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; current = current.borrow_mut();&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;assert!&lt;/span&gt;(current.is_none(), &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;default Tokio timer already set \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;                    for execution context&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; handle = handle.as_priv()&lt;br&gt;                .unwrap_or_else(|| &lt;span class=&#34;hljs-built_in&#34;&gt;panic!&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;`handle` does not reference a timer&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;br&gt;            *current = &lt;span class=&#34;hljs-literal&#34;&gt;Some&lt;/span&gt;(handle.clone());&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        f(enter)&lt;br&gt;    &amp;#125;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt; 最后可以看到运行的是Worker的&lt;a href=&#34;https://tokio-rs.github.io/tokio/src/tokio_threadpool/worker/mod.rs.html#219-292&#34;&gt;run&lt;/a&gt;方法，run方法根据执行的结果进行了状态调整。对看247行try_run_task()方法:&lt;br&gt; &lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[inline]&lt;/span&gt;&lt;br&gt;   &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;try_run_task&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;, notify: &amp;amp;Arc&amp;lt;Notifier&amp;gt;) -&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.try_run_owned_task(notify) &amp;#123;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;       &amp;#125;&lt;br&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.try_steal_task(notify)&lt;br&gt;   &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 先进入395行try_run_owned_task方法的实现，调用了458行的run_task方法：&lt;br&gt; &lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;run_task&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;, task: Arc&amp;lt;Task&amp;gt;, notify: &amp;amp;Arc&amp;lt;Notifier&amp;gt;) &amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; task::Run::*;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; run = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.run_task2(&amp;amp;task, notify);&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;match&lt;/span&gt; run &amp;#123;&lt;br&gt;           Idle =&amp;gt; &amp;#123;&amp;#125;&lt;br&gt;           Schedule =&amp;gt; &amp;#123;&lt;br&gt;               &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.is_blocking.get() &amp;#123;&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.pool.submit_external(task, &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.pool);&lt;br&gt;               &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.entry().push_internal(task);&lt;br&gt;               &amp;#125;&lt;br&gt;           &amp;#125;&lt;br&gt;           Complete =&amp;gt; &amp;#123;&lt;br&gt;               &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; state: pool::State = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.pool.state.load(Acquire).into();&lt;br&gt;&lt;br&gt;               &lt;span class=&#34;hljs-keyword&#34;&gt;loop&lt;/span&gt; &amp;#123;&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; next = state;&lt;br&gt;                   next.dec_num_futures();&lt;br&gt;&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; actual = &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.pool.state.compare_and_swap(&lt;br&gt;                       state.into(), next.into(), AcqRel).into();&lt;br&gt;&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; actual == state &amp;#123;&lt;br&gt;                       trace!(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;task complete; state=&amp;#123;:?&amp;#125;&amp;quot;&lt;/span&gt;, next);&lt;br&gt;&lt;br&gt;                       &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; state.num_futures() == &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &amp;#123;&lt;br&gt;                           &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; next.is_terminated() &amp;#123;&lt;br&gt;                               &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.pool.terminate_sleeping_workers();&lt;br&gt;                           &amp;#125;&lt;br&gt;                       &amp;#125;&lt;br&gt;                       &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;                   &amp;#125;&lt;br&gt;&lt;br&gt;                   state = actual;&lt;br&gt;               &amp;#125;&lt;br&gt;           &amp;#125;&lt;br&gt;       &amp;#125;&lt;br&gt;   &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;调用了runtask2方法并对结果做了处理。跟踪到最后一行task.run(),切换到&lt;a href=&#34;https://docs.rs/crate/tokio-threadpool/0.1.8/source/src/task/mod.rs&#34;&gt;task.run&lt;/a&gt;,我们看到task内有一个类型是UnsafeCell&amp;lt;Option&amp;lt;Spawn&lt;BoxFuture&gt;&amp;gt;&amp;gt;,这个就是future实例了。&lt;br&gt;切换到run方法，看以看到他调用了Spawn的&lt;a href=&#34;https://docs.rs/tokio/0.1/tokio/prelude/task/struct.Spawn.html#method.poll_future_notify&#34;&gt;poll_future_notify&lt;/a&gt;方法。这个方法在Future中讲过，最终调用了future的poll方法。&lt;/p&gt;
&lt;h3 id=&#34;ThreadPool中task的notify&#34;&gt;&lt;a href=&#34;#ThreadPool中task的notify&#34; class=&#34;headerlink&#34; title=&#34;ThreadPool中task的notify&#34;&gt;&lt;/a&gt;ThreadPool中task的notify&lt;/h3&gt;&lt;p&gt;找到&lt;a href=&#34;https://docs.rs/crate/tokio-threadpool/0.1.8/source/src/task/mod.rs&#34;&gt;notify&lt;/a&gt;方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;rust&#34;&gt; /// Notify the task
    pub fn notify(me: Arc&amp;lt;Task&amp;gt;, pool: &amp;amp;Arc&amp;lt;Pool&amp;gt;) &amp;#123;
        if me.schedule() &amp;#123;
            let _ = pool.submit(me, pool);
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先判断一下自己的当前状态，然后通过pool把自己提交到线程池中，进入&lt;a href=&#34;https://docs.rs/crate/tokio-threadpool/0.1.8/source/src/pool/mod.rs&#34;&gt;submit&lt;/a&gt;方法，可以看到熟悉的流程了。&lt;/p&gt;
</content>
        <updated>2018-11-20T11:28:18.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018-11-17-rust-mio-md/</id>
        <title>rust mio</title>
        <link rel="alternate" href="http://example.com/2018-11-17-rust-mio-md/"/>
        <content type="html">&lt;h2 id=&#34;mio-简介&#34;&gt;&lt;a href=&#34;#mio-简介&#34; class=&#34;headerlink&#34; title=&#34;mio 简介&#34;&gt;&lt;/a&gt;mio 简介&lt;/h2&gt;&lt;p&gt;一个高性能的底层IO库，提供了非阻塞的API,事件通知机制，和一些其他构建高性能应用所需要的工具。&lt;/p&gt;
&lt;p&gt;当前支持的平台有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;li&gt;OS X&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;/li&gt;
&lt;li&gt;NetBSD&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;IOS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mio的使用&#34;&gt;&lt;a href=&#34;#mio的使用&#34; class=&#34;headerlink&#34; title=&#34;mio的使用&#34;&gt;&lt;/a&gt;mio的使用&lt;/h2&gt;&lt;p&gt;创建一个&lt;a href=&#34;https://docs.rs/mio/0.6.16/mio/struct.Poll.html&#34;&gt;Poll&lt;/a&gt;，Poll会从OS是读取你感兴趣的事件放在&lt;a href=&#34;https://docs.rs/mio/0.6.16/mio/struct.Events.html&#34;&gt;Events&lt;/a&gt;中,然后你可以处理这些IO事件。&lt;/p&gt;
&lt;p&gt;他的使用方式和epoll非常像。&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;&lt;a href=&#34;#example&#34; class=&#34;headerlink&#34; title=&#34;example&#34;&gt;&lt;/a&gt;example&lt;/h3&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; mio::*;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;use&lt;/span&gt; mio::net::&amp;#123;TcpListener, TcpStream&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Setup some tokens to allow us to identify which event is&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// for which socket.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; SERVER: Token = Token(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; CLIENT: Token = Token(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; addr = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;127.0.0.1:13265&amp;quot;&lt;/span&gt;.parse().unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Setup the server socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; server = TcpListener::bind(&amp;amp;addr).unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Create a poll instance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; poll = Poll::new().unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Start listening for incoming connections&lt;/span&gt;&lt;br&gt;poll.register(&amp;amp;server, SERVER, Ready::readable(),&lt;br&gt;              PollOpt::edge()).unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Setup the client socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; sock = TcpStream::connect(&amp;amp;addr).unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Register the socket&lt;/span&gt;&lt;br&gt;poll.register(&amp;amp;sock, CLIENT, Ready::readable(),&lt;br&gt;              PollOpt::edge()).unwrap();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Create storage for events&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; events = Events::with_capacity(&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;loop&lt;/span&gt; &amp;#123;&lt;br&gt;    poll.poll(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; events, &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;).unwrap();&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; event &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; events.iter() &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;match&lt;/span&gt; event.token() &amp;#123;&lt;br&gt;            SERVER =&amp;gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// Accept and drop the socket immediately, this will close&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// the socket and notify the client of the EOF.&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; _ = server.accept();&lt;br&gt;            &amp;#125;&lt;br&gt;            CLIENT =&amp;gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// The server just shuts down the socket, let&amp;#x27;s just exit&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// from our event loop.&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;            &amp;#125;&lt;br&gt;            _ =&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;unreachable!&lt;/span&gt;(),&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;mio分析&#34;&gt;&lt;a href=&#34;#mio分析&#34; class=&#34;headerlink&#34; title=&#34;mio分析&#34;&gt;&lt;/a&gt;mio分析&lt;/h2&gt;&lt;p&gt;mio结构相对比较简单，分event和net两个module,加和Registration相关的类。&lt;/p&gt;
&lt;h3 id=&#34;event-module&#34;&gt;&lt;a href=&#34;#event-module&#34; class=&#34;headerlink&#34; title=&#34;event module&#34;&gt;&lt;/a&gt;event module&lt;/h3&gt;&lt;p&gt;struct Event 代表一个产生的事件&lt;br&gt;struct Events 代表事件的集合，可生成迭代器使用&lt;/p&gt;
&lt;p&gt;evented trait 主要用于往Poll里注册感兴趣的事件。&lt;/p&gt;
&lt;h3 id=&#34;net-module&#34;&gt;&lt;a href=&#34;#net-module&#34; class=&#34;headerlink&#34; title=&#34;net module&#34;&gt;&lt;/a&gt;net module&lt;/h3&gt;&lt;p&gt;提供了TcpStream,TcpListener,UdpScoket的poll方式的封装。&lt;/p&gt;
&lt;h3 id=&#34;Registration&#34;&gt;&lt;a href=&#34;#Registration&#34; class=&#34;headerlink&#34; title=&#34;Registration&#34;&gt;&lt;/a&gt;Registration&lt;/h3&gt;&lt;p&gt;用于用户空间的Poll注册的句柄。Registration实现了Evented,他不能用于系统事件中。&lt;br&gt;一个Registration总是会伴随一个SetReadiness，Registration用于注册到Poll中，调用poll方法后会阻塞，调用SetReadiness的set_readiness方法可以唤醒他。&lt;/p&gt;
</content>
        <updated>2018-11-17T13:24:58.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018-11-16-rust-fut01-md/</id>
        <title>rust future0.1</title>
        <link rel="alternate" href="http://example.com/2018-11-16-rust-fut01-md/"/>
        <content type="html">&lt;h2 id=&#34;Futures介绍&#34;&gt;&lt;a href=&#34;#Futures介绍&#34; class=&#34;headerlink&#34; title=&#34;Futures介绍&#34;&gt;&lt;/a&gt;Futures介绍&lt;/h2&gt;&lt;p&gt;在实际工作中，我们会遇到一些下面的场景：一次数据查询操作，一次向server端的RPC调用，一次timeout等待，一个运行在线程池中的耗时的任务，从socket读取数据等等。&lt;br&gt;我们要想取得运行计算的值，可以使用同步的方法等待返回值，但会遇到一些不便，如主线程不能太耗时，线程阻塞方案实现不方便等。当同步的方式不行时，我们可以考虑异步的方式实现，futures就是一种异步实现方式。具体上说就是future抽像了异步的函数，future的值就是任务的计算结果。&lt;/p&gt;
&lt;p&gt;整个Futures库分为五个大的模块，接下来会分别介绍：&lt;/p&gt;
&lt;h3 id=&#34;Future-trait&#34;&gt;&lt;a href=&#34;#Future-trait&#34; class=&#34;headerlink&#34; title=&#34;Future trait&#34;&gt;&lt;/a&gt;Future trait&lt;/h3&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Future&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Item&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Error&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;poll&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; Poll&amp;lt;Self::Item, Self::Error&amp;gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;wait&lt;/span&gt;&lt;/span&gt;(slef) -&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Result&lt;/span&gt;::&lt;span class=&#34;hljs-built_in&#34;&gt;Result&lt;/span&gt;&amp;lt;Self::Item, Self::Error&amp;gt; &amp;#123;&lt;br&gt;        ...&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    ...&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从代码中可以看到他有两个类型Item和Error,Item就是Future结束时返回值的类型。最主要的是poll方法，使用者需要实现方法复写自己的逻辑，Future通过poll不断的查询返回结果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;  poll方法&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;尝试获取结果，没有获取值是返回Ok(Async::NotReady),有返回值是返回Ok(Async::Ready(Item)),错误时返回Result::Error(err)。该函数不会阻塞当前线程。
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;wait方法&lt;br&gt; 该方法在任务完成前会阻塞当前线程，所以它不适合在event loops场景中调用。从源码分析得出的wait方法执行流程：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight coq&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs coq&#34;&gt;graph TD&lt;br&gt;    A[wait] --&amp;gt; B(Spawn::wait_future)&lt;br&gt;    B--&amp;gt;C[Spawn::poll_future_notify]&lt;br&gt;    C--&amp;gt;D&amp;#123;返回结果&amp;#125;&lt;br&gt;    D--&amp;gt;|&lt;span class=&#34;hljs-type&#34;&gt;Ready&lt;/span&gt;| &lt;span class=&#34;hljs-type&#34;&gt;D1&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;)&lt;br&gt;    D--&amp;gt;|&lt;span class=&#34;hljs-type&#34;&gt;NotReady&lt;/span&gt;| &lt;span class=&#34;hljs-type&#34;&gt;D2&lt;/span&gt;[Notify.park]&lt;br&gt;    D2--&amp;gt;|&lt;span class=&#34;hljs-type&#34;&gt;外部调用notify&lt;/span&gt;| &lt;span class=&#34;hljs-type&#34;&gt;C&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/task_impl/std/mod.rs.html#227-237&#34;&gt;wait源码&lt;/a&gt;  &lt;a href=&#34;https://docs.rs/crate/futures/0.1.25/source/src/task_impl/core.rs&#34;&gt;相关代码&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Future的转换方法&lt;br&gt; Future有许多的转换方法，功能都类似转换完后都会把自己消费掉，生成一个新的Future。&lt;ul&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;map_err&lt;/li&gt;
&lt;li&gt;from_err&lt;/li&gt;
&lt;li&gt;then&lt;/li&gt;
&lt;li&gt;and_then&lt;/li&gt;
&lt;li&gt;or_else&lt;/li&gt;
&lt;li&gt;join&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;select2&lt;/li&gt;
&lt;li&gt;into_stream  转换成Stream&lt;/li&gt;
&lt;li&gt;flattern&lt;/li&gt;
&lt;li&gt;flatten_stream 转换成Stream&lt;/li&gt;
&lt;li&gt;fuse 完成状态后不可用的一种Future&lt;/li&gt;
&lt;li&gt;insepect 完成后会调用一个结果处理函数&lt;/li&gt;
&lt;li&gt;catch_unwind&lt;/li&gt;
&lt;li&gt;shared  多线程共享的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Future的五种生成方式&#34;&gt;&lt;a href=&#34;#Future的五种生成方式&#34; class=&#34;headerlink&#34; title=&#34;Future的五种生成方式&#34;&gt;&lt;/a&gt;Future的五种生成方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;impl &lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/future/trait.IntoFuture.html&#34;&gt;IntoFuture&lt;/a&gt; trait，通过into_future 方法生成Future, Reuslt,(A:IntoFuture,B,C…)与实现了Future的struct默认实现了IntoFuture trait。&lt;/li&gt;
&lt;li&gt;impl &lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/future/trait.FutureFrom.html&#34;&gt;FutureFrom&lt;/a&gt; trait,通过future_from方法生成Future。&lt;/li&gt;
&lt;li&gt;impl &lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/future/trait.Future.html&#34;&gt;Future&lt;/a&gt; trait,写具体的poll方法。&lt;/li&gt;
&lt;li&gt;通过Future的转换方法生成，可转换成不同功能的Future。&lt;/li&gt;
&lt;li&gt;通过一些库自带的方法生成Future,比如，empty, lazy, loop_fn, poll_fn, select_all, select_ok, result, ok, join_all_err等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Sink-trait&#34;&gt;&lt;a href=&#34;#Sink-trait&#34; class=&#34;headerlink&#34; title=&#34;Sink trait&#34;&gt;&lt;/a&gt;Sink trait&lt;/h2&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Sink&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SinkItem&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SinkError&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;start_send&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;, item: Self::SinkItem) -&amp;gt; StartSend&amp;lt;Self::SinkItem, Self::SinkError&amp;gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;poll_complete&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; Poll&amp;lt;(), Self::SinkError&amp;gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;close&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; Poll&amp;lt;(), Self::SinkError&amp;gt; &amp;#123;&lt;br&gt;        ...&lt;br&gt;    &amp;#125;&lt;br&gt;    ...&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Sink可以理解为数据消费者，从功能上来说只接收数据，当sink满时就不再接收数据了。比如Channels,Socket,Pipes等，从一定程度上来说buffer也可以算是Sink。&lt;/p&gt;
&lt;h3 id=&#34;sink的方法&#34;&gt;&lt;a href=&#34;#sink的方法&#34; class=&#34;headerlink&#34; title=&#34;sink的方法&#34;&gt;&lt;/a&gt;sink的方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt; start_send   接收发送过来的数据，数据可处理时返回AsyncSink(Ready(Item)),不可时处理返回AsyncSink(NotReady)&lt;/li&gt;
&lt;li&gt; poll_complete  flush消费掉所有缓存的数据&lt;/li&gt;
&lt;li&gt; close,关闭该sink，不再处理数据，close之后不可以再调poll_complete。&lt;/li&gt;
&lt;li&gt; wait —&amp;gt; &lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/sink/wait.rs.html#22-59&#34;&gt;Wait&lt;/a&gt; 把异步的Sink转变成同步操作。&lt;/li&gt;
&lt;li&gt; with —&amp;gt;With 处理数据时会执行一个函数&lt;/li&gt;
&lt;li&gt; with_flat_map –&amp;gt;WithFlatMap,对每个value使用函数变成Stream,每个处理的数据为该Stream的整个值。&lt;/li&gt;
&lt;li&gt; buffer –&amp;gt;&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/sink/buffer.rs.html#12-18&#34;&gt;Buffer&lt;/a&gt;，为sink做指定数量的缓存&lt;/li&gt;
&lt;li&gt; fanout –&amp;gt; &lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/sink/struct.Fanout.html&#34;&gt;Fanout&lt;/a&gt;,让两个处理速度不一样的Sink操持同步。&lt;/li&gt;
&lt;li&gt; flush  转变成一个Future,当Sink poll_complet完成时为完成状态&lt;/li&gt;
&lt;li&gt; send 转变成一个Future,发送一个value到sink中并阻塞直到sink flush完成&lt;/li&gt;
&lt;li&gt; send_all 如send,发送的是一个Stream&lt;/li&gt;
&lt;li&gt; 其他转换方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Sink的生成方式&#34;&gt;&lt;a href=&#34;#Sink的生成方式&#34; class=&#34;headerlink&#34; title=&#34;Sink的生成方式&#34;&gt;&lt;/a&gt;Sink的生成方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;默认实现的Sink，如Vec,Box&lt;Sink&gt;&lt;/li&gt;
&lt;li&gt;impl Sink trait写start_send,poll_complete方法&lt;/li&gt;
&lt;li&gt;通过转换方法生成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stream-trait&#34;&gt;&lt;a href=&#34;#stream-trait&#34; class=&#34;headerlink&#34; title=&#34;stream trait&#34;&gt;&lt;/a&gt;stream trait&lt;/h2&gt;&lt;p&gt;Stream代表任何的数据源或一系列顺序事件，他的行为很像是Iterator,和Future一样他不会阻塞适合于异步编程&lt;/p&gt;
&lt;h3 id=&#34;Stream-方法&#34;&gt;&lt;a href=&#34;#Stream-方法&#34; class=&#34;headerlink&#34; title=&#34;Stream 方法&#34;&gt;&lt;/a&gt;Stream 方法&lt;/h3&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Stream&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Item&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Error&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;poll&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; Poll&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;Self::Item&amp;gt;, Self::Error&amp;gt;;&lt;br&gt;    ...&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;poll,尝试获取下一个值，如果Stream已结束返回None&lt;/li&gt;
&lt;li&gt;wait –&amp;gt;Wait,创建一个迭代器，会阻塞当前线程直到Stream结束&lt;/li&gt;
&lt;li&gt;一些转换方法，较特殊的如collect方法生成&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/stream/collect.rs.html#13-16&#34;&gt;Collect&lt;/a&gt;把Stream中的值收集到一个Vector中，本身是一个Future；forward也是生成一个Future。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Stream的生成&#34;&gt;&lt;a href=&#34;#Stream的生成&#34; class=&#34;headerlink&#34; title=&#34;Stream的生成&#34;&gt;&lt;/a&gt;Stream的生成&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/future/struct.IntoStream.html&#34;&gt;IntoStream&lt;/a&gt; trait而来&lt;/li&gt;
&lt;li&gt;impl Stream trait写poll方法&lt;/li&gt;
&lt;li&gt;通过&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/stream/index.html&#34;&gt;以下方法&lt;/a&gt;生成：empty,futures_ordered,futures_unordered,iter,iter_ok,iter_result,once,poll_fn,repeat,unfold&lt;/li&gt;
&lt;li&gt;通过转换方法生成&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Executor&#34;&gt;&lt;a href=&#34;#Executor&#34; class=&#34;headerlink&#34; title=&#34;Executor&#34;&gt;&lt;/a&gt;Executor&lt;/h2&gt;&lt;p&gt;Future代表了一个异步结果值，但开始并没有值，如何得到结果值呢。这就需要有一个机制去驱动他，这就是Executor的作用。通过executor调用Future去执行poll方法获取相应的值。但在futures这个库中只提供了相应的trait和简单的wait,notify实现。若想看线程池方案的executor实现可查点&lt;a href=&#34;https://docs.rs/tokio/0.1.15/tokio/&#34;&gt;tokio库&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Sink与Stream最终都会转化为Future在Executor中执行。&lt;/p&gt;
&lt;h3 id=&#34;Task&#34;&gt;&lt;a href=&#34;#Task&#34; class=&#34;headerlink&#34; title=&#34;Task&#34;&gt;&lt;/a&gt;Task&lt;/h3&gt;&lt;p&gt;一个重要的概念Task,它是一个轻量级的future的执行任务。通过&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/task/fn.current.html&#34;&gt;current&lt;/a&gt;函数获取当前future的Task&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Clone)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Task&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    id: &lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;,&lt;br&gt;    unpark: TaskUnpark,&lt;br&gt;    events: UnparkEvents,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;TaskUnpark&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    handle: NotifyHandle,&lt;br&gt;    id: &lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt; Task&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;notify&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.events.notify(); -&amp;gt; no operation&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.unpark.notify();-&amp;gt;handle.notify(id)&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;AtomicTask&#34;&gt;&lt;a href=&#34;#AtomicTask&#34; class=&#34;headerlink&#34; title=&#34;AtomicTask&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/task/struct.AtomicTask.html&#34;&gt;AtomicTask&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;它的作用是作任务通知，当计算任务完成时通知代表其异步结果的Future。再这之前必须调用register注册Future的task，每个AtomicTask只能注册一个任务。&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AtomicTask&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    state: AtomicUsize,&lt;br&gt;    task: UnsafeCell&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;Task&amp;gt;&amp;gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Notify&#34;&gt;&lt;a href=&#34;#Notify&#34; class=&#34;headerlink&#34; title=&#34;Notify&#34;&gt;&lt;/a&gt;Notify&lt;/h3&gt;&lt;p&gt;   Noitfy是一个trait,用于通知executor执行future的poll方法。内部默认使用的&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/task_impl/std/mod.rs.html#227-237&#34;&gt;ThreadNotify&lt;/a&gt;实现。&lt;br&gt;   NotifyHandle是Notify的句柄，通过NotifyHandle可以在其他地方调用Notify的notify方法。&lt;/p&gt;
&lt;h3 id=&#34;LocalKey&#34;&gt;&lt;a href=&#34;#LocalKey&#34; class=&#34;headerlink&#34; title=&#34;LocalKey&#34;&gt;&lt;/a&gt;LocalKey&lt;/h3&gt;&lt;p&gt;代表Task的本地变量，可通过&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/macro.task_local.html&#34;&gt;task_local&lt;/a&gt;生成&lt;/p&gt;
&lt;h3 id=&#34;future的Wait代码分析&#34;&gt;&lt;a href=&#34;#future的Wait代码分析&#34; class=&#34;headerlink&#34; title=&#34;future的Wait代码分析&#34;&gt;&lt;/a&gt;future的Wait代码分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;找到future的&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/future/mod.rs.html#295-300&#34;&gt;wait&lt;/a&gt;入口，内部调用了 &lt;blockquote&gt;
&lt;p&gt;::executor::spawn(self).wait_future()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;找到&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/task_impl/mod.rs.html#254-260&#34;&gt;spawn&lt;/a&gt;,里面生成了一个Spawn实例。&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;spawn&lt;/span&gt;&lt;/span&gt;&amp;lt;T&amp;gt;(obj: T) -&amp;gt; Spawn&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;        Spawn &amp;#123;&lt;br&gt;        id: fresh_task_id(),&lt;br&gt;        obj: obj,&lt;br&gt;        data: local_map(),&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;找到Spawn的&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/task_impl/std/mod.rs.html#227-237&#34;&gt;wait_future&lt;/a&gt;方法:&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;wait_future&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Result&lt;/span&gt;&amp;lt;F::Item, F::Error&amp;gt; &amp;#123;&lt;br&gt;        ThreadNotify::with_current(|notify| &amp;#123;&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;loop&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.poll_future_notify(notify, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)? &amp;#123;&lt;br&gt;                    Async::NotReady =&amp;gt; notify.park(),&lt;br&gt;                    Async::Ready(e) =&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;Ok&lt;/span&gt;(e),&lt;br&gt;                &amp;#125;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;)&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
往下找到475行&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;thread_local! &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; CURRENT_THREAD_NOTIFY: Arc&amp;lt;ThreadNotify&amp;gt; = Arc::new(ThreadNotify &amp;#123;&lt;br&gt;        state: AtomicUsize::new(IDLE),&lt;br&gt;        mutex: Mutex::new(()),&lt;br&gt;        condvar: Condvar::new(),&lt;br&gt;    &amp;#125;);&lt;br&gt;&amp;#125;&lt;br&gt;.....&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;with_current&lt;/span&gt;&lt;/span&gt;&amp;lt;F, R&amp;gt;(f: F) -&amp;gt; R&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;(&amp;amp;Arc&amp;lt;ThreadNotify&amp;gt;) -&amp;gt; R,&lt;br&gt;    &amp;#123;&lt;br&gt;        CURRENT_THREAD_NOTIFY.with(|notify| f(notify))&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
相当于直接调用了一个loop循环，内部调用了poll_future_notify方法，如果返回NotReady则调用&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/task_impl/std/mod.rs.html#481-516&#34;&gt;park&lt;/a&gt;,阻塞了当前线程：&lt;figure class=&#34;highlight lasso&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs lasso&#34;&gt;fn park(&amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-params&#34;&gt;...&lt;/span&gt;.&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; mut m = &lt;span class=&#34;hljs-built_in&#34;&gt;self&lt;/span&gt;.mutex.lock().unwrap();&lt;br&gt;&lt;br&gt;     &lt;span class=&#34;hljs-params&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;...&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;loop&lt;/span&gt; &amp;#123;&lt;br&gt;            m = &lt;span class=&#34;hljs-built_in&#34;&gt;self&lt;/span&gt;.condvar.wait(m).unwrap();&lt;br&gt;&lt;br&gt;     &lt;span class=&#34;hljs-params&#34;&gt;...&lt;/span&gt;..&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
进入&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/task_impl/mod.rs.html#320-327&#34;&gt;poll_future_notify&lt;/a&gt;方法:&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;poll_future_notify&lt;/span&gt;&lt;/span&gt;&amp;lt;N&amp;gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;,&lt;br&gt;                                notify: &amp;amp;N,&lt;br&gt;                                id: &lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;) -&amp;gt; Poll&amp;lt;T::Item, T::Error&amp;gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; N: &lt;span class=&#34;hljs-built_in&#34;&gt;Clone&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;Into&lt;/span&gt;&amp;lt;NotifyHandle&amp;gt;,&lt;br&gt;             T: Future,&lt;br&gt;   &amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.poll_fn_notify(notify, id, |f| f.poll())&lt;br&gt;   &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
进入poll_fn_notify&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;poll_fn_notify&lt;/span&gt;&lt;/span&gt;&amp;lt;N, F, R&amp;gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;,&lt;br&gt;                             notify: &amp;amp;N,&lt;br&gt;                             id: &lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;,&lt;br&gt;                             f: F) -&amp;gt; R&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; T) -&amp;gt; R,&lt;br&gt;              N: &lt;span class=&#34;hljs-built_in&#34;&gt;Clone&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;Into&lt;/span&gt;&amp;lt;NotifyHandle&amp;gt;,&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; mk = || notify.clone().into();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.enter(BorrowedUnpark::new(&amp;amp;mk, id), f)&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入enter方法&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;enter&lt;/span&gt;&lt;/span&gt;&amp;lt;F, R&amp;gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;, unpark: BorrowedUnpark, f: F) -&amp;gt; R&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; T) -&amp;gt; R&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; borrowed = BorrowedTask &amp;#123;&lt;br&gt;            id: &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.id,&lt;br&gt;            unpark: unpark,&lt;br&gt;            events: BorrowedEvents::new(),&lt;br&gt;            map: &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.data,&lt;br&gt;        &amp;#125;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; obj = &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.obj;&lt;br&gt;        set(&amp;amp;borrowed, || f(obj))&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入&lt;a href=&#34;https://docs.rs/crate/futures/0.1.25/source/src/task_impl/core.rs&#34;&gt;set&lt;/a&gt;方法&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;set&lt;/span&gt;&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;, F, R&amp;gt;(task: &amp;amp;BorrowedTask&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt;, f: F) -&amp;gt; R&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; F: &lt;span class=&#34;hljs-built_in&#34;&gt;FnOnce&lt;/span&gt;() -&amp;gt; R&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; set = &lt;span class=&#34;hljs-keyword&#34;&gt;match&lt;/span&gt; SET.load(Relaxed) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; =&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;panic!&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;not initialized&amp;quot;&lt;/span&gt;),&lt;br&gt;        n =&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; mem::transmute::&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt;&lt;/span&gt;(*&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;u8&lt;/span&gt;)&amp;gt;(n) &amp;#125;,&lt;br&gt;    &amp;#125;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Reset&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt;&lt;/span&gt;(*&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;u8&lt;/span&gt;), *&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;u8&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Drop&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; Reset &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-meta&#34;&gt;#[inline]&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;drop&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;            (&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)(&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; _reset = Reset(set, get_ptr().unwrap());&lt;br&gt;    set(task &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; _ &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;u8&lt;/span&gt;);&lt;br&gt;    f()&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;简单调用了这个闭包，即future.poll()方法。&lt;/p&gt;
&lt;p&gt;到这里poll方法如果成功返回则就结束了，如果返回NotReady则阻塞住了，&lt;em&gt;&lt;strong&gt;如何通知unpark呢？&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们注意到上面有个&lt;a href=&#34;https://docs.rs/crate/futures/0.1.25/source/src/task_impl/core.rs&#34;&gt;BorrowedTask&lt;/a&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Copy, Clone)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;BorrowedUnpark&lt;/span&gt;&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;    f: &amp;amp;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Fn&lt;/span&gt;() -&amp;gt; NotifyHandle,&lt;br&gt;    id: &lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有一个返回&lt;a href=&#34;https://docs.rs/futures/0.1/src/futures/task_impl/mod.rs.html#630-632&#34;&gt;NotifyHandle&lt;/a&gt;的变量，下面就用到了他进行通知unpark&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt; BorrowedUnpark&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;#[inline]&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;new&lt;/span&gt;&lt;/span&gt;(f: &amp;amp;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;Fn&lt;/span&gt;() -&amp;gt; NotifyHandle, id: &lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;) -&amp;gt; BorrowedUnpark&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;        BorrowedUnpark &amp;#123; f: f, id: id &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;#[inline]&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;to_owned&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; TaskUnpark &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; handle = (&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.f)();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; id = handle.clone_id(&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.id);&lt;br&gt;        TaskUnpark &amp;#123; handle: handle, id: id &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;impl&lt;/span&gt; TaskUnpark &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;notify&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.handle.notify(&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.id);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;will_notify&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;, other: &amp;amp;BorrowedUnpark) -&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.id == other.id &amp;amp;&amp;amp; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.handle.inner == (other.f)().inner&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以要想通知到他就需要拿到这个task。&lt;/p&gt;
&lt;h2 id=&#34;sync-模块&#34;&gt;&lt;a href=&#34;#sync-模块&#34; class=&#34;headerlink&#34; title=&#34;sync 模块&#34;&gt;&lt;/a&gt;sync 模块&lt;/h2&gt;&lt;p&gt;这个模块主要是处理future,streams和sinks使用时的同步工具，与标准库不同他不会阻塞线程，是工作在task级别。&lt;/p&gt;
&lt;h3 id=&#34;mpsc&#34;&gt;&lt;a href=&#34;#mpsc&#34; class=&#34;headerlink&#34; title=&#34;mpsc&#34;&gt;&lt;/a&gt;mpsc&lt;/h3&gt;&lt;p&gt; multi-producer,single-consumer模型，FIFO queue with back pressure。主要有Sender和Receiver两个角色，通过他们很好的处理了backPressure的问题。&lt;/p&gt;
&lt;h3 id=&#34;Sender-and-Receiver&#34;&gt;&lt;a href=&#34;#Sender-and-Receiver&#34; class=&#34;headerlink&#34; title=&#34;Sender and Receiver&#34;&gt;&lt;/a&gt;Sender and Receiver&lt;/h3&gt;&lt;p&gt;本质上Sender是一个Sink,Receiver是一个Stream。可通过&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/sync/mpsc/fn.channel.html&#34;&gt;channel&lt;/a&gt;方法生成&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;&lt;a href=&#34;#source-code&#34; class=&#34;headerlink&#34; title=&#34;source code&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/sync/mpsc/mod.rs.html#639-670&#34;&gt;source code&lt;/a&gt;&lt;/h4&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Debug)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Sender&lt;/span&gt;&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Channel state shared between the sender and receiver.&lt;/span&gt;&lt;br&gt;    inner: Arc&amp;lt;Inner&amp;lt;T&amp;gt;&amp;gt;,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Handle to the task that is blocked on this sender. This handle is sent&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// to the receiver half in order to be notified when the sender becomes&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// unblocked.&lt;/span&gt;&lt;br&gt;    sender_task: Arc&amp;lt;Mutex&amp;lt;SenderTask&amp;gt;&amp;gt;,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// True if the sender might be blocked. This is an optimization to avoid&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// having to lock the mutex most of the time.&lt;/span&gt;&lt;br&gt;    maybe_parked: &lt;span class=&#34;hljs-built_in&#34;&gt;bool&lt;/span&gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Debug)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Receiver&lt;/span&gt;&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;    inner: Arc&amp;lt;Inner&amp;lt;T&amp;gt;&amp;gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[derive(Debug)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Inner&lt;/span&gt;&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Max buffer size of the channel. If `None` then the channel is unbounded.&lt;/span&gt;&lt;br&gt;    buffer: &lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;usize&lt;/span&gt;&amp;gt;,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Internal channel state. Consists of the number of messages stored in the&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// channel as well as a flag signalling that the channel is closed.&lt;/span&gt;&lt;br&gt;    state: AtomicUsize,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Atomic, FIFO queue used to send messages to the receiver&lt;/span&gt;&lt;br&gt;    message_queue: Queue&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Atomic, FIFO queue used to send parked task handles to the receiver.&lt;/span&gt;&lt;br&gt;    parked_queue: Queue&amp;lt;Arc&amp;lt;Mutex&amp;lt;SenderTask&amp;gt;&amp;gt;&amp;gt;,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Number of senders in existence&lt;/span&gt;&lt;br&gt;    num_senders: AtomicUsize,&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Handle to the receiver&amp;#x27;s task.&lt;/span&gt;&lt;br&gt;    recv_task: Mutex&amp;lt;ReceiverTask&amp;gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出Sender与Receiver共享了Inner部分，inner中有两个队列，一个用于存储消息，一个用于存储阻塞的发送任务。&lt;/p&gt;
&lt;h4 id=&#34;执行流程&#34;&gt;&lt;a href=&#34;#执行流程&#34; class=&#34;headerlink&#34; title=&#34;执行流程&#34;&gt;&lt;/a&gt;执行流程&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;The steps for sending a message are roughly:

1. Increment the channel message count
2. If the channel is at capacity, push the task handle onto the wait queue
3. Push the message onto the message queue.

The steps for receiving a message are roughly:

1. Pop a message from the message queue
2. Pop a task handle from the wait queue
3. Decrement the channel message count.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分析代码时可以以&lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/sync/mpsc/mod.rs.html#923-958&#34;&gt;Receiver的Stream trait中的poll方法&lt;/a&gt;为入口，或者以  &lt;a href=&#34;https://docs.rs/futures/0.1.25/src/futures/sync/mpsc/mod.rs.html#643-654&#34;&gt;Sender的Sink trait中的start_send方法&lt;/a&gt;为入口&lt;/p&gt;
&lt;h3 id=&#34;SpawnHandle&#34;&gt;&lt;a href=&#34;#SpawnHandle&#34; class=&#34;headerlink&#34; title=&#34;SpawnHandle&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/sync/mpsc/struct.SpawnHandle.html&#34;&gt;SpawnHandle&lt;/a&gt;&lt;/h3&gt;&lt;p&gt; 通过&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/sync/mpsc/fn.spawn.html&#34;&gt;spawn 方法&lt;/a&gt;可产生一个SpawnHandle，&lt;br&gt; 参数&lt;a href=&#34;https://docs.rs/futures/0.1.25/futures/future/trait.Executor.html&#34;&gt;executor&lt;/a&gt;为上面提到过的Executor没有具体实现。&lt;br&gt; SpawnHandle是一个Stream的代理,当被drop时，Stream就不再产生数据了&lt;/p&gt;
&lt;h3 id=&#34;onshot&#34;&gt;&lt;a href=&#34;#onshot&#34; class=&#34;headerlink&#34; title=&#34;onshot&#34;&gt;&lt;/a&gt;onshot&lt;/h3&gt;&lt;p&gt; 与mpsc关不多，也分为Sender和Receiver两个角色。但是Sender和Receiver本质是一个Future。&lt;/p&gt;
</content>
        <updated>2018-11-16T10:21:23.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018-11-02-cell/</id>
        <title>rust cell 详解</title>
        <link rel="alternate" href="http://example.com/2018-11-02-cell/"/>
        <content type="html">&lt;h2 id=&#34;背景介绍&#34;&gt;&lt;a href=&#34;#背景介绍&#34; class=&#34;headerlink&#34; title=&#34;背景介绍&#34;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://doc.rust-lang.org/std/cell/index.html&#34;&gt;https://doc.rust-lang.org/std/cell/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;众所周知，rust的内存安全是基于一个规则，一个对像须满足以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只存在一个可变引用&lt;/li&gt;
&lt;li&gt;有多个不可变引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在写rust代码时，会发现这样的规则在写代码时会受到一定的束缚。于是rust官方出了一个可以灵活解决对像可变性问题的工具cell。&lt;/p&gt;
&lt;h2 id=&#34;cell与Mutex等的不同&#34;&gt;&lt;a href=&#34;#cell与Mutex等的不同&#34; class=&#34;headerlink&#34; title=&#34;cell与Mutex等的不同&#34;&gt;&lt;/a&gt;cell与Mutex等的不同&lt;/h2&gt;&lt;p&gt;诚然我们可以用Mutex, atomic等来解决可变性问题，但cell与mutex有本质的不同。&lt;br&gt;cell是线程安全的（没有实现Sync，不能跨线程访问），Mutex主要用来解决多线程数据竞争的。&lt;/p&gt;
&lt;h2 id=&#34;cell的具体分析&#34;&gt;&lt;a href=&#34;#cell的具体分析&#34; class=&#34;headerlink&#34; title=&#34;cell的具体分析&#34;&gt;&lt;/a&gt;cell的具体分析&lt;/h2&gt;&lt;p&gt;cell的实现分Cell, RefCell, UnsafeCell，还有一个开源实现LazyCell&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[repr(transparent)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Cell&lt;/span&gt;&lt;/span&gt;&amp;lt;T: ?&lt;span class=&#34;hljs-built_in&#34;&gt;Sized&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;    value: UnsafeCell&amp;lt;T&amp;gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;RefCell&lt;/span&gt;&lt;/span&gt;&amp;lt;T: ?&lt;span class=&#34;hljs-built_in&#34;&gt;Sized&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;    borrow: Cell&amp;lt;BorrowFlag&amp;gt;,&lt;br&gt;    value: UnsafeCell&amp;lt;T&amp;gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#[repr(transparent)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;UnsafeCell&lt;/span&gt;&lt;/span&gt;&amp;lt;T: ?&lt;span class=&#34;hljs-built_in&#34;&gt;Sized&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;    value: T,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;从源码上来看Cell和RefCell的内部都是由UnsafeCell来实现的, 要想理解Cell与RefCell就需要先了解UnsafeCell&lt;/p&gt;
&lt;h3 id=&#34;UnsafeCell&#34;&gt;&lt;a href=&#34;#UnsafeCell&#34; class=&#34;headerlink&#34; title=&#34;UnsafeCell&#34;&gt;&lt;/a&gt;UnsafeCell&lt;/h3&gt;&lt;p&gt;UnsafeCell非常简单，有一个重要的方法：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//返回一个可变指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;get&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; T &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; UnsafeCell&amp;lt;T&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; T &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; T&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;通过一个不可变对像返回一个可变的对像指针，Cell与RefCell正是利用了这个达到相应的目的，前提是他们是线程安全的。&lt;/p&gt;
&lt;h3 id=&#34;Cell&#34;&gt;&lt;a href=&#34;#Cell&#34; class=&#34;headerlink&#34; title=&#34;Cell&#34;&gt;&lt;/a&gt;Cell&lt;/h3&gt;&lt;p&gt;看一下replace,get, set, take等方法，都是基于UnsafeCell返回的可变指针的内存操作&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;replace&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;, val: T) -&amp;gt; T &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// SAFETY: This can cause data races if called from a separate thread,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// but `Cell` is `!Sync` so this won&amp;#x27;t happen.&lt;/span&gt;&lt;br&gt;        mem::replace(&lt;span class=&#34;hljs-keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; &amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; *&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.value.get() &amp;#125;, val)&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//T: Copy    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;get&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; T &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// SAFETY: This can cause data races if called from a separate thread,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// but `Cell` is `!Sync` so this won&amp;#x27;t happen.&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; *&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.value.get() &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;RefCell&#34;&gt;&lt;a href=&#34;#RefCell&#34; class=&#34;headerlink&#34; title=&#34;RefCell&#34;&gt;&lt;/a&gt;RefCell&lt;/h3&gt;&lt;p&gt;Refcell是在Cell的增强版，他在Cell的基础上添加了借用，内部维护着一个借用的标识，在运行时做借用检查。&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;borrow&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; Ref&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;_&lt;/span&gt;, T&amp;gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.try_borrow().expect(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;already mutably borrowed&amp;quot;&lt;/span&gt;)&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;borrow_mut&lt;/span&gt;&lt;/span&gt;(&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;) -&amp;gt; RefMut&amp;lt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;#x27;_&lt;/span&gt;, T&amp;gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.try_borrow_mut().expect(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;already borrowed&amp;quot;&lt;/span&gt;)&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;主要方法borrow和borrow_mut返回相应的引用对像，当Ref或RefMut销毁时相应的借用关系消除&lt;/p&gt;
&lt;h3 id=&#34;LazyCell&#34;&gt;&lt;a href=&#34;#LazyCell&#34; class=&#34;headerlink&#34; title=&#34;LazyCell&#34;&gt;&lt;/a&gt;LazyCell&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/indiv0/lazycell&#34;&gt;https://github.com/indiv0/lazycell&lt;/a&gt;, 从代码看其和Cell功能类似，用于延迟初始化。&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LazyCell&lt;/span&gt;&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;    inner: UnsafeCell&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;Option&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





</content>
        <updated>2018-11-02T14:39:42.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018-2-11-daemon-thread/</id>
        <title>java守护线程</title>
        <link rel="alternate" href="http://example.com/2018-2-11-daemon-thread/"/>
        <content type="html">&lt;h3 id=&#34;守护线程&#34;&gt;&lt;a href=&#34;#守护线程&#34; class=&#34;headerlink&#34; title=&#34;守护线程&#34;&gt;&lt;/a&gt;守护线程&lt;/h3&gt;&lt;p&gt;线程分为前台线程（用户线程）与后台线程（守护线程），守护线程并不常用，他主要为其他对像或用户线程提供服务。一般的守护线程如   jvm垃圾回收线程，和内存管理线程等。&lt;br&gt;守护线程具有最低的优先级，他不依赖于终端，但依赖于虚拟机。 而jvm的退出是以用户线程的运行结束为终止的。&lt;/p&gt;
&lt;h3 id=&#34;使用方法&#34;&gt;&lt;a href=&#34;#使用方法&#34; class=&#34;headerlink&#34; title=&#34;使用方法&#34;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;figure class=&#34;highlight lasso&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs lasso&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;Thread&lt;/span&gt; th = &lt;span class=&#34;hljs-literal&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;Thread&lt;/span&gt;();&lt;br&gt;th.setDaemon(&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//设置为守护线程&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;setDaemon方法必须要在start方法之前调，否则会产生illegalThreadStateException;&lt;/p&gt;
&lt;h3 id=&#34;注意事项&#34;&gt;&lt;a href=&#34;#注意事项&#34; class=&#34;headerlink&#34; title=&#34;注意事项&#34;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;p&gt;对于jre来说程序的运行结束的标志是所有前台线程的运行结束，而不管守护线程是否运行完。&lt;/p&gt;
&lt;p&gt;当前台线程运行完成时，程序就自动终止了，因此不要在守护线程中做文件，输入输出等操作。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    Thread daemon_th =  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; Thread(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;daemon thread start&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;br&gt;                e.printStackTrace();&lt;br&gt;            &amp;#125;&lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;daemon thread finished&amp;quot;&lt;/span&gt;);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;);&lt;br&gt;    daemon_th.setDaemon(&lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;);&lt;br&gt;    Thread work_th =  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; Thread(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;work thread finished&amp;quot;&lt;/span&gt;);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;);&lt;br&gt;    daemon_th.start();&lt;br&gt;    work_th.start();&lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main thread finished&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行结果为:&lt;br&gt;daemon thread start&lt;br&gt;work thread finished&lt;br&gt;main thread finished&lt;/p&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;&lt;a href=&#34;#应用场景&#34; class=&#34;headerlink&#34; title=&#34;应用场景&#34;&gt;&lt;/a&gt;应用场景&lt;/h3&gt;&lt;p&gt;由于以上的特点，守护线程不适合做资源申请回收相关的操作。适合做为其他线程服务的工作。&lt;/p&gt;
&lt;p&gt;如java的垃圾回收线程就是典型的守护线程。&lt;/p&gt;
</content>
        <updated>2018-02-11T05:06:28.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018-01-11-jnr/</id>
        <title>jni与jnr</title>
        <link rel="alternate" href="http://example.com/2018-01-11-jnr/"/>
        <content type="html">&lt;h3 id=&#34;背景介绍&#34;&gt;&lt;a href=&#34;#背景介绍&#34; class=&#34;headerlink&#34; title=&#34;背景介绍&#34;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;在熟悉了JNI使用及其原理后，发现在JNI有一些缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对新手不够友好，上手成本相当的高&lt;/li&gt;
&lt;li&gt;需要熟悉c/c++等native语言&lt;/li&gt;
&lt;li&gt;对接过程比较复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于熟悉JNI的工程师来说，可以驾轻就熟的写出如下的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;JNITest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;            System.loadLibrary(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;libXXX&amp;quot;&lt;/span&gt;);&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt;(Exception e) &amp;#123;&lt;br&gt;            &lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;native&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;JNIEXPORT jstring &lt;span class=&#34;hljs-title&#34;&gt;Java_JNITest_test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(JNIEnv*, jclass)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写惯了这样的对接代码后发现一个问题: java代码与jni native接口似乎是可以自动映射的，包括参数，函数名。如果在jni胶水层不需要写其他逻辑代码的话，就是一个简单的本地调用再封装。&lt;/p&gt;
&lt;p&gt;这些千篇一律的代码，可不可以标准化呢？有两种比较好的解决方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/java-native-access/jna&#34;&gt;JNA(Java Native Access)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jnr&#34;&gt;JNR(Java Native Runtime)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/java/jvmls2013nutter-2013526.pdf&#34;&gt;这篇文章&lt;/a&gt;很好的讲述了他们的之间的区别，不过文章比较老了，随着时间的流逝，技术在不断的更新升级。成熟的方案意是会受到用户的青睐。&lt;/p&gt;
&lt;h3 id=&#34;JNA-JNR&#34;&gt;&lt;a href=&#34;#JNA-JNR&#34; class=&#34;headerlink&#34; title=&#34;JNA/JNR&#34;&gt;&lt;/a&gt;JNA/JNR&lt;/h3&gt;&lt;p&gt;这两种解决方案都不需要写jni代码，集成起来相当的方便&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs csharp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;JNATest&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;CLibrary&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Library&lt;/span&gt; &amp;#123;&lt;br&gt;        CLibrary INSTANCE = (CLibrary)Native.loadLibrary(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CDLL&amp;quot;&lt;/span&gt;, CLibrary.&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; sum = CLibrary.INSTANCE.&lt;span class=&#34;hljs-keyword&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;);&lt;br&gt;&lt;br&gt;        System.&lt;span class=&#34;hljs-keyword&#34;&gt;out&lt;/span&gt;.println(sum);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;基本思想&#34;&gt;&lt;a href=&#34;#基本思想&#34; class=&#34;headerlink&#34; title=&#34;基本思想&#34;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类型映射&lt;/li&gt;
&lt;li&gt;JNI Stub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://asm.ow2.io/&#34;&gt;字节码生成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与JNI的区别&#34;&gt;&lt;a href=&#34;#与JNI的区别&#34; class=&#34;headerlink&#34; title=&#34;与JNI的区别&#34;&gt;&lt;/a&gt;与JNI的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JNI是JNA/JNR的基础&lt;/li&gt;
&lt;li&gt;JNA/JNR不可能取代JNI， 适用于Java调用native的场景&lt;/li&gt;
&lt;li&gt;native调用java代码，还是要借用jni,自己写代码&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2018-01-11T13:48:26.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2017-08-17-jni/</id>
        <title>jni实践总结</title>
        <link rel="alternate" href="http://example.com/2017-08-17-jni/"/>
        <content type="html">&lt;h3 id=&#34;JNI介绍&#34;&gt;&lt;a href=&#34;#JNI介绍&#34; class=&#34;headerlink&#34; title=&#34;JNI介绍&#34;&gt;&lt;/a&gt;JNI介绍&lt;/h3&gt;&lt;p&gt;JNI (java native interface), 是java与native语言(c/c++, rust等)之间的胶水， 用于解决java与native之间相互调用的问题。&lt;/p&gt;
&lt;h3 id=&#34;JNI-Function与指针&#34;&gt;&lt;a href=&#34;#JNI-Function与指针&#34; class=&#34;headerlink&#34; title=&#34;JNI Function与指针&#34;&gt;&lt;/a&gt;JNI Function与指针&lt;/h3&gt;&lt;p&gt;native代码在访问JVM相关的信息时所使用的函数叫JNI函数。JNI函数只能通过JNI指针调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/images/designa.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;JNI接口的组织形式和C++的函数表非常相似。这样设计的主要优势是JNI的名字空间可以与native分开。JVM可以很容易的保有多个版本的JNI函数表。&lt;/p&gt;
&lt;p&gt;注意JNIEnv是线程本地变量，不可跨线程使用&lt;/p&gt;
&lt;h3 id=&#34;加载动态库与方法映射&#34;&gt;&lt;a href=&#34;#加载动态库与方法映射&#34; class=&#34;headerlink&#34; title=&#34;加载动态库与方法映射&#34;&gt;&lt;/a&gt;加载动态库与方法映射&lt;/h3&gt;&lt;p&gt;java加载动态库&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.juzenhon.jni;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;        System.loadLibrary(“libXXX”);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;native&lt;/span&gt; staic &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;native&lt;/span&gt; String &lt;span class=&#34;hljs-title&#34;&gt;getStr&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;jni层想关方法&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//加载动动态库时回调&lt;/span&gt;&lt;br&gt;JNIEXPORT jint JNICALL &lt;span class=&#34;hljs-constructor&#34;&gt;JNI_OnLoad(JavaVM &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;vm&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;reserved&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//卸载动态库时回调&lt;/span&gt;&lt;br&gt;JNIEXPORT void JNICALL &lt;span class=&#34;hljs-constructor&#34;&gt;JNI_OnUnload(JavaVM &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;vm&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;reserved&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//add方法在jni中的映射&lt;/span&gt;&lt;br&gt;JNIEXPORT jint &lt;span class=&#34;hljs-constructor&#34;&gt;Java_com_juzenhon_jni_Test_add(JNIEnv&lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jclass&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jint&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jint&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//getStr方法在jni中的映射&lt;/span&gt;&lt;br&gt;JNIEXPORT jstring &lt;span class=&#34;hljs-constructor&#34;&gt;Java_com_juzenhon_jni_Test_getStr(JNIEnv&lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jobject&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//除了上面这种通过Java_包名_类名_方法名的映射形式，还可以通过该函数注册本地方法关联映射&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-constructor&#34;&gt;RegisterNatives()&lt;/span&gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;native方法参数-jni类型&#34;&gt;&lt;a href=&#34;#native方法参数-jni类型&#34; class=&#34;headerlink&#34; title=&#34;native方法参数, jni类型&#34;&gt;&lt;/a&gt;native方法参数, jni类型&lt;/h3&gt;&lt;p&gt;所有java native的第一个参数是JNI接口指针(也就是JNIEnv), 第二个参数依赖于该native方法是否是静态的，非静态的是object的引用 （jobject), 静态的是jclass。其余的是相对应的java参数(对应关系可以在&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html&#34;&gt;这里找&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;java与jni类型基本上一一对应，基本数据类型是值传递，对像使用jobject指针传递，自己做对象映射。&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html&#34;&gt;详细类型链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;JNI-References&#34;&gt;&lt;a href=&#34;#JNI-References&#34; class=&#34;headerlink&#34; title=&#34;JNI References&#34;&gt;&lt;/a&gt;JNI References&lt;/h3&gt;&lt;p&gt;JNI中把对java对像的引用分为 local-Reference 和 global-Reference两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local Reference不能跨线程访问传递，只有等到native方法返回后才会一起销毁。jvm维护了一个local reference表，有大小限制，典型值是512。在使用中避免传递过大的对多的对像，如对一大的对像List进行循环迭代而忘了手动释放产生的loal reference。&lt;/li&gt;
&lt;li&gt;global reference 可跨线程访问，不用时通过DeleteGlobalReference删除&lt;/li&gt;
&lt;li&gt;两种引用都会影响JVM对其Java对像的回收&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JNI可以抛出Java异常&lt;/li&gt;
&lt;li&gt;在JNI回调Java代码后。native并不能捕获java异常，须通过ExceptionOccurred 检查是否有异常发生，native可通过ExceptionClear清除异常，然后执行自己的异常处理过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据缓存&#34;&gt;&lt;a href=&#34;#数据缓存&#34; class=&#34;headerlink&#34; title=&#34;数据缓存&#34;&gt;&lt;/a&gt;数据缓存&lt;/h3&gt;&lt;p&gt;为了提高效率，JNI中jclass，jmethod, jfield等可以只查询一次并缓存起来供下次直接使用。&lt;/p&gt;
&lt;h3 id=&#34;多线程&#34;&gt;&lt;a href=&#34;#多线程&#34; class=&#34;headerlink&#34; title=&#34;多线程&#34;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在native中新开线程并想访问Java代码时， 需要先把Attach到JVM, 使用完毕后Detach。Attach后可获取到JNIEnv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可通过MonitorEnter和MonitorExit实现java的Synchronize&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;大数据的传递&#34;&gt;&lt;a href=&#34;#大数据的传递&#34; class=&#34;headerlink&#34; title=&#34;大数据的传递&#34;&gt;&lt;/a&gt;大数据的传递&lt;/h3&gt;&lt;p&gt;在java与native之间传递数据时，需要做相应的对像内存转换，如，把c++的map转换成java的Map。如果数据量较大时，效率是比较低的。一般有以下几种解决方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java NIO 使用了直接内存访问的形式, DirectByteBuffer（堆外内存)。jni给与了支持，NewDirectByteBuffer方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不做数据转换，传一个内存指针上去，（缺点不好维护，有可能导致内存泄漏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拆封或调整接口，数据细粒度化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;懒加载模式， 根据上层使用的数据情况做转换&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2017-08-17T11:45:53.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2015-08-11-android-cmd-md/</id>
        <title>android adb 命令</title>
        <link rel="alternate" href="http://example.com/2015-08-11-android-cmd-md/"/>
        <content type="html">&lt;h4 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;在android开发过程中，避免不了在要与机器或虚拟机打交道，为了方便调试，我们需要了解一些有用的命令。&lt;/p&gt;
&lt;h4 id=&#34;adb-shell-dumpsys&#34;&gt;&lt;a href=&#34;#adb-shell-dumpsys&#34; class=&#34;headerlink&#34; title=&#34;adb shell dumpsys&#34;&gt;&lt;/a&gt;adb shell dumpsys&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    usage: dumpsys
      To dump all services.
or:
   dumpsys [-t TIMEOUT] [--help | -l | --skip SERVICES | SERVICE [ARGS]]
     --help: shows this help
     -l: only list services, do not dump them
     -t TIMEOUT: TIMEOUT to use in seconds instead of default 10 seconds
     --skip SERVICES: dumps all services but SERVICES (comma-separated list)
     SERVICE [ARGS]: dumps only service SERVICE, optionally passing ARGS to it

SERVICE主要为：
    dumpsys -l //可列出所有的SERVICE值
    meminfo //显示内存信息
    activity //显示activitiy信息（ ARGS 主要为activities,intents,services,providers等)
    cpuinfo //显示CPU信息
    package packagename //获取安装包信息
    batterystats  //显示电量信息
    window //显示键盘，窗口和它们的关系（dumpsys window lastanr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;adb-shell-am&#34;&gt;&lt;a href=&#34;#adb-shell-am&#34; class=&#34;headerlink&#34; title=&#34;adb shell am&#34;&gt;&lt;/a&gt;adb shell am&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    am start -a android.intent.action.VIEW -d http://www.google.cn/
    am start -n com.xxx.yyy/XActivity
    startservice
    startactivity
    stopservice
    broadcast  -a android.NET.conn.CONNECTIVITY_CHANGE
    ……
    stack list //堆栈信息
    monitor //监控crash or ANR
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;adb-shell-pm&#34;&gt;&lt;a href=&#34;#adb-shell-pm&#34; class=&#34;headerlink&#34; title=&#34;adb shell pm&#34;&gt;&lt;/a&gt;adb shell pm&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    help
    list （features | packages | libraries |  instrumentation | permissions | permission-groups）
    resolve-activity
    query-activities
    query-services
    suspend
    query-receivers
    clear com.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;让需要输入内容的文本框获取焦点&#34;&gt;&lt;a href=&#34;#让需要输入内容的文本框获取焦点&#34; class=&#34;headerlink&#34; title=&#34;让需要输入内容的文本框获取焦点&#34;&gt;&lt;/a&gt;让需要输入内容的文本框获取焦点&lt;/h4&gt;&lt;p&gt;adb shell input text ‘HelloWorld’&lt;/p&gt;
&lt;h4 id=&#34;查看设备中可以被调试的应用的进程号&#34;&gt;&lt;a href=&#34;#查看设备中可以被调试的应用的进程号&#34; class=&#34;headerlink&#34; title=&#34;查看设备中可以被调试的应用的进程号&#34;&gt;&lt;/a&gt;查看设备中可以被调试的应用的进程号&lt;/h4&gt;&lt;p&gt;adb jdwp&lt;/p&gt;
&lt;h4 id=&#34;查看设备的-ip-地址&#34;&gt;&lt;a href=&#34;#查看设备的-ip-地址&#34; class=&#34;headerlink&#34; title=&#34;查看设备的 ip 地址&#34;&gt;&lt;/a&gt;查看设备的 ip 地址&lt;/h4&gt;&lt;p&gt;netcfg&lt;/p&gt;
</content>
        <updated>2015-08-11T05:19:26.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2013-12-24-android-touch/</id>
        <title>android touch处理流程</title>
        <link rel="alternate" href="http://example.com/2013-12-24-android-touch/"/>
        <content type="html">&lt;h3 id=&#34;Touch-事件简介&#34;&gt;&lt;a href=&#34;#Touch-事件简介&#34; class=&#34;headerlink&#34; title=&#34;Touch 事件简介&#34;&gt;&lt;/a&gt;Touch 事件简介&lt;/h3&gt;&lt;p&gt;在android进行ui交互时，不可避免的要涉及到touch事件，如onClick，onLongClick ,onItemClick等等事件都是经过一连串的touch形成的。&lt;/p&gt;
&lt;p&gt;MotionEvent分为以下几个动作：&lt;br&gt;MotionEvent.ACTION_DOWN——–第一个手指按下的动作&lt;br&gt;MotionEvent.ACTION_MOVE ——–按下后的移动操作&lt;br&gt;MotionEvent.ACTION_POINTER_DOWN ——-第二根及以上的手指按下&lt;br&gt;MotionEvent.ACTION_POINTER_UP  ——–&lt;br&gt;MotionEvent.ACTION_UP ———–手指抬起操作，表示一次触摸操作完成&lt;br&gt;MotionEvent.ACTION_CANCEL     ———-DOWN目标的取消动作&lt;/p&gt;
&lt;h3 id=&#34;Touch-事件流程&#34;&gt;&lt;a href=&#34;#Touch-事件流程&#34; class=&#34;headerlink&#34; title=&#34;Touch 事件流程&#34;&gt;&lt;/a&gt;Touch 事件流程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt; 按照Touch的发生顺序，首先是Down事件，而Down事件的处理有决定作用，下图为down事件的处理：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/touchdown.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move和up的事件处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上图中的TouchTarget我们称之为处理目标，下图为move和up事件的处理过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/touchother.bmp&#34;&gt;&lt;/p&gt;
</content>
        <updated>2013-12-24T02:58:45.000Z</updated>
    </entry>
</feed>

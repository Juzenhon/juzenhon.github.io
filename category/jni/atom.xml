<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>黑色红桃7 • Posts by &#34;jni&#34; category</title>
    <link href="http://example.com" />
    <updated>2018-01-11T13:48:26.000Z</updated>
    <entry>
        <id>http://example.com/2018-01-11-jnr/</id>
        <title>jni与jnr</title>
        <link rel="alternate" href="http://example.com/2018-01-11-jnr/"/>
        <content type="html">&lt;h3 id=&#34;背景介绍&#34;&gt;&lt;a href=&#34;#背景介绍&#34; class=&#34;headerlink&#34; title=&#34;背景介绍&#34;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;在熟悉了JNI使用及其原理后，发现在JNI有一些缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对新手不够友好，上手成本相当的高&lt;/li&gt;
&lt;li&gt;需要熟悉c/c++等native语言&lt;/li&gt;
&lt;li&gt;对接过程比较复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于熟悉JNI的工程师来说，可以驾轻就熟的写出如下的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;JNITest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;            System.loadLibrary(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;libXXX&amp;quot;&lt;/span&gt;);&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt;(Exception e) &amp;#123;&lt;br&gt;            &lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;native&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;JNIEXPORT jstring &lt;span class=&#34;hljs-title&#34;&gt;Java_JNITest_test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(JNIEnv*, jclass)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写惯了这样的对接代码后发现一个问题: java代码与jni native接口似乎是可以自动映射的，包括参数，函数名。如果在jni胶水层不需要写其他逻辑代码的话，就是一个简单的本地调用再封装。&lt;/p&gt;
&lt;p&gt;这些千篇一律的代码，可不可以标准化呢？有两种比较好的解决方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/java-native-access/jna&#34;&gt;JNA(Java Native Access)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jnr&#34;&gt;JNR(Java Native Runtime)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/java/jvmls2013nutter-2013526.pdf&#34;&gt;这篇文章&lt;/a&gt;很好的讲述了他们的之间的区别，不过文章比较老了，随着时间的流逝，技术在不断的更新升级。成熟的方案意是会受到用户的青睐。&lt;/p&gt;
&lt;h3 id=&#34;JNA-JNR&#34;&gt;&lt;a href=&#34;#JNA-JNR&#34; class=&#34;headerlink&#34; title=&#34;JNA/JNR&#34;&gt;&lt;/a&gt;JNA/JNR&lt;/h3&gt;&lt;p&gt;这两种解决方案都不需要写jni代码，集成起来相当的方便&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs csharp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;JNATest&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;CLibrary&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Library&lt;/span&gt; &amp;#123;&lt;br&gt;        CLibrary INSTANCE = (CLibrary)Native.loadLibrary(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CDLL&amp;quot;&lt;/span&gt;, CLibrary.&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; sum = CLibrary.INSTANCE.&lt;span class=&#34;hljs-keyword&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;);&lt;br&gt;&lt;br&gt;        System.&lt;span class=&#34;hljs-keyword&#34;&gt;out&lt;/span&gt;.println(sum);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;基本思想&#34;&gt;&lt;a href=&#34;#基本思想&#34; class=&#34;headerlink&#34; title=&#34;基本思想&#34;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类型映射&lt;/li&gt;
&lt;li&gt;JNI Stub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://asm.ow2.io/&#34;&gt;字节码生成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与JNI的区别&#34;&gt;&lt;a href=&#34;#与JNI的区别&#34; class=&#34;headerlink&#34; title=&#34;与JNI的区别&#34;&gt;&lt;/a&gt;与JNI的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JNI是JNA/JNR的基础&lt;/li&gt;
&lt;li&gt;JNA/JNR不可能取代JNI， 适用于Java调用native的场景&lt;/li&gt;
&lt;li&gt;native调用java代码，还是要借用jni,自己写代码&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2018-01-11T13:48:26.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2017-08-17-jni/</id>
        <title>jni实践总结</title>
        <link rel="alternate" href="http://example.com/2017-08-17-jni/"/>
        <content type="html">&lt;h3 id=&#34;JNI介绍&#34;&gt;&lt;a href=&#34;#JNI介绍&#34; class=&#34;headerlink&#34; title=&#34;JNI介绍&#34;&gt;&lt;/a&gt;JNI介绍&lt;/h3&gt;&lt;p&gt;JNI (java native interface), 是java与native语言(c/c++, rust等)之间的胶水， 用于解决java与native之间相互调用的问题。&lt;/p&gt;
&lt;h3 id=&#34;JNI-Function与指针&#34;&gt;&lt;a href=&#34;#JNI-Function与指针&#34; class=&#34;headerlink&#34; title=&#34;JNI Function与指针&#34;&gt;&lt;/a&gt;JNI Function与指针&lt;/h3&gt;&lt;p&gt;native代码在访问JVM相关的信息时所使用的函数叫JNI函数。JNI函数只能通过JNI指针调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/images/designa.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;JNI接口的组织形式和C++的函数表非常相似。这样设计的主要优势是JNI的名字空间可以与native分开。JVM可以很容易的保有多个版本的JNI函数表。&lt;/p&gt;
&lt;p&gt;注意JNIEnv是线程本地变量，不可跨线程使用&lt;/p&gt;
&lt;h3 id=&#34;加载动态库与方法映射&#34;&gt;&lt;a href=&#34;#加载动态库与方法映射&#34; class=&#34;headerlink&#34; title=&#34;加载动态库与方法映射&#34;&gt;&lt;/a&gt;加载动态库与方法映射&lt;/h3&gt;&lt;p&gt;java加载动态库&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.juzenhon.jni;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;        System.loadLibrary(“libXXX”);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;native&lt;/span&gt; staic &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;native&lt;/span&gt; String &lt;span class=&#34;hljs-title&#34;&gt;getStr&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;jni层想关方法&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//加载动动态库时回调&lt;/span&gt;&lt;br&gt;JNIEXPORT jint JNICALL &lt;span class=&#34;hljs-constructor&#34;&gt;JNI_OnLoad(JavaVM &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;vm&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;reserved&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//卸载动态库时回调&lt;/span&gt;&lt;br&gt;JNIEXPORT void JNICALL &lt;span class=&#34;hljs-constructor&#34;&gt;JNI_OnUnload(JavaVM &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;vm&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;reserved&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//add方法在jni中的映射&lt;/span&gt;&lt;br&gt;JNIEXPORT jint &lt;span class=&#34;hljs-constructor&#34;&gt;Java_com_juzenhon_jni_Test_add(JNIEnv&lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jclass&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jint&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jint&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//getStr方法在jni中的映射&lt;/span&gt;&lt;br&gt;JNIEXPORT jstring &lt;span class=&#34;hljs-constructor&#34;&gt;Java_com_juzenhon_jni_Test_getStr(JNIEnv&lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;jobject&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//除了上面这种通过Java_包名_类名_方法名的映射形式，还可以通过该函数注册本地方法关联映射&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-constructor&#34;&gt;RegisterNatives()&lt;/span&gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;native方法参数-jni类型&#34;&gt;&lt;a href=&#34;#native方法参数-jni类型&#34; class=&#34;headerlink&#34; title=&#34;native方法参数, jni类型&#34;&gt;&lt;/a&gt;native方法参数, jni类型&lt;/h3&gt;&lt;p&gt;所有java native的第一个参数是JNI接口指针(也就是JNIEnv), 第二个参数依赖于该native方法是否是静态的，非静态的是object的引用 （jobject), 静态的是jclass。其余的是相对应的java参数(对应关系可以在&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html&#34;&gt;这里找&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;java与jni类型基本上一一对应，基本数据类型是值传递，对像使用jobject指针传递，自己做对象映射。&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html&#34;&gt;详细类型链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;JNI-References&#34;&gt;&lt;a href=&#34;#JNI-References&#34; class=&#34;headerlink&#34; title=&#34;JNI References&#34;&gt;&lt;/a&gt;JNI References&lt;/h3&gt;&lt;p&gt;JNI中把对java对像的引用分为 local-Reference 和 global-Reference两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local Reference不能跨线程访问传递，只有等到native方法返回后才会一起销毁。jvm维护了一个local reference表，有大小限制，典型值是512。在使用中避免传递过大的对多的对像，如对一大的对像List进行循环迭代而忘了手动释放产生的loal reference。&lt;/li&gt;
&lt;li&gt;global reference 可跨线程访问，不用时通过DeleteGlobalReference删除&lt;/li&gt;
&lt;li&gt;两种引用都会影响JVM对其Java对像的回收&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JNI可以抛出Java异常&lt;/li&gt;
&lt;li&gt;在JNI回调Java代码后。native并不能捕获java异常，须通过ExceptionOccurred 检查是否有异常发生，native可通过ExceptionClear清除异常，然后执行自己的异常处理过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据缓存&#34;&gt;&lt;a href=&#34;#数据缓存&#34; class=&#34;headerlink&#34; title=&#34;数据缓存&#34;&gt;&lt;/a&gt;数据缓存&lt;/h3&gt;&lt;p&gt;为了提高效率，JNI中jclass，jmethod, jfield等可以只查询一次并缓存起来供下次直接使用。&lt;/p&gt;
&lt;h3 id=&#34;多线程&#34;&gt;&lt;a href=&#34;#多线程&#34; class=&#34;headerlink&#34; title=&#34;多线程&#34;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在native中新开线程并想访问Java代码时， 需要先把Attach到JVM, 使用完毕后Detach。Attach后可获取到JNIEnv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可通过MonitorEnter和MonitorExit实现java的Synchronize&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;大数据的传递&#34;&gt;&lt;a href=&#34;#大数据的传递&#34; class=&#34;headerlink&#34; title=&#34;大数据的传递&#34;&gt;&lt;/a&gt;大数据的传递&lt;/h3&gt;&lt;p&gt;在java与native之间传递数据时，需要做相应的对像内存转换，如，把c++的map转换成java的Map。如果数据量较大时，效率是比较低的。一般有以下几种解决方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java NIO 使用了直接内存访问的形式, DirectByteBuffer（堆外内存)。jni给与了支持，NewDirectByteBuffer方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不做数据转换，传一个内存指针上去，（缺点不好维护，有可能导致内存泄漏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拆封或调整接口，数据细粒度化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;懒加载模式， 根据上层使用的数据情况做转换&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2017-08-17T11:45:53.000Z</updated>
    </entry>
</feed>

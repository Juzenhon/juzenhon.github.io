{
    "version": "https://jsonfeed.org/version/1",
    "title": "黑色红桃7 • All posts by \"java\" category",
    "description": "朱新宏的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2018-2-11-daemon-thread/",
            "url": "http://example.com/2018-2-11-daemon-thread/",
            "title": "java守护线程",
            "date_published": "2018-02-11T05:06:28.000Z",
            "content_html": "<h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p>线程分为前台线程（用户线程）与后台线程（守护线程），守护线程并不常用，他主要为其他对像或用户线程提供服务。一般的守护线程如   jvm垃圾回收线程，和内存管理线程等。<br>守护线程具有最低的优先级，他不依赖于终端，但依赖于虚拟机。 而jvm的退出是以用户线程的运行结束为终止的。</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-keyword\">Thread</span> th = <span class=\"hljs-literal\">new</span> <span class=\"hljs-keyword\">Thread</span>();<br>th.setDaemon(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">//设置为守护线程</span><br></code></pre></td></tr></table></figure>\n<p>setDaemon方法必须要在start方法之前调，否则会产生illegalThreadStateException;</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>对于jre来说程序的运行结束的标志是所有前台线程的运行结束，而不管守护线程是否运行完。</p>\n<p>当前台线程运行完成时，程序就自动终止了，因此不要在守护线程中做文件，输入输出等操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>&#123;<br>    Thread daemon_th =  <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;daemon thread start&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class=\"hljs-string\">&quot;daemon thread finished&quot;</span>);<br>        &#125;<br>    &#125;);<br>    daemon_th.setDaemon(<span class=\"hljs-keyword\">true</span>);<br>    Thread work_th =  <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;work thread finished&quot;</span>);<br>        &#125;<br>    &#125;);<br>    daemon_th.start();<br>    work_th.start();<br>    System.out.println(<span class=\"hljs-string\">&quot;main thread finished&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>运行结果为:<br>daemon thread start<br>work thread finished<br>main thread finished</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>由于以上的特点，守护线程不适合做资源申请回收相关的操作。适合做为其他线程服务的工作。</p>\n<p>如java的垃圾回收线程就是典型的守护线程。</p>\n",
            "tags": []
        }
    ]
}
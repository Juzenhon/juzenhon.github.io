{
    "version": "https://jsonfeed.org/version/1",
    "title": "黑色红桃7 • All posts by \"golang\" category",
    "description": "朱新宏的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021-04-23-go-dynamic-type-md/",
            "url": "http://example.com/2021-04-23-go-dynamic-type-md/",
            "title": "go接口动态类型",
            "date_published": "2021-04-23T12:22:42.000Z",
            "content_html": "<h3 id=\"接口使用\"><a href=\"#接口使用\" class=\"headerlink\" title=\"接口使用\"></a>接口使用</h3><p>golang的接口与java里的接口使用上比较相似, 写一个简单的demo</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><span class=\"hljs-keyword\">type</span> Animal <span class=\"hljs-keyword\">interface</span> &#123;<br>\tsing()<br>&#125;<br><span class=\"hljs-keyword\">type</span> Bird <span class=\"hljs-keyword\">struct</span> &#123;<br>\tcolor <span class=\"hljs-keyword\">int</span><br>\tweight <span class=\"hljs-keyword\">int</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Bird)</span><span class=\"hljs-title\">sing</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println( <span class=\"hljs-string\">&quot;zhi-zhi&quot;</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Cat <span class=\"hljs-keyword\">struct</span> &#123;<br>\tcolor <span class=\"hljs-keyword\">int</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Cat)</span><span class=\"hljs-title\">sing</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println( <span class=\"hljs-string\">&quot;miao-mi&quot;</span>)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> anim Animal<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%T, %v\\n&quot;</span>, anim, anim)<br>\tanim = Bird&#123;color: <span class=\"hljs-number\">1</span>, weight: <span class=\"hljs-number\">100</span>&#125;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%T, %v\\n&quot;</span>, anim, anim)<br>\tanim = Cat&#123;color: <span class=\"hljs-number\">2</span>&#125;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%T, %v\\n&quot;</span>, anim, anim)<br>\tanim.sing()<br>&#125;<br><span class=\"hljs-comment\">//打印结果:</span><br>&lt;<span class=\"hljs-literal\">nil</span>&gt;, &lt;<span class=\"hljs-literal\">nil</span>&gt;<br>main.Bird, &#123;<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">100</span>&#125;<br>main.Cat, &#123;<span class=\"hljs-number\">2</span>&#125;<br>miao-mi<br></code></pre></td></tr></table></figure>\n<h3 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h3><p>反汇编一下代码，找到**anim = Bird{color: 1, weight: 100}**这行代码</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\"><span class=\"hljs-number\">0x0305</span> <span class=\"hljs-number\">00773</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">XORPS</span>   X0, X0<br>//在地址autotmp_27上构造一个Bird<br><span class=\"hljs-number\">0x0308</span> <span class=\"hljs-number\">00776</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVUPS</span>  X0, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_27+<span class=\"hljs-number\">144</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0310</span> <span class=\"hljs-number\">00784</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">$1</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_27+<span class=\"hljs-number\">144</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x031c</span> <span class=\"hljs-number\">00796</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">$100</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_27+<span class=\"hljs-number\">152</span>(<span class=\"hljs-built_in\">SP</span>)<br>//Bird的itab地址赋值给<span class=\"hljs-built_in\">AX</span>，再赋值给(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0328</span> <span class=\"hljs-number\">00808</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       LEAQ    go<span class=\"hljs-number\">.</span>itab.<span class=\"hljs-string\">&quot;&quot;</span>.Bird,<span class=\"hljs-string\">&quot;&quot;</span>.Animal(SB), <span class=\"hljs-built_in\">AX</span><br><span class=\"hljs-number\">0x032f</span> <span class=\"hljs-number\">00815</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, (<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0333</span> <span class=\"hljs-number\">00819</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       LEAQ    <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_27+<span class=\"hljs-number\">144</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">AX</span><br>//把临时的Bird的地址赋值<span class=\"hljs-number\">8</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x033b</span> <span class=\"hljs-number\">00827</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-number\">8</span>(<span class=\"hljs-built_in\">SP</span>)<br>以itab和构造的Bird为参数调用 runtime<span class=\"hljs-number\">.</span>convT2Inoptr<br><span class=\"hljs-number\">0x0340</span> <span class=\"hljs-number\">00832</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">CALL</span>    runtime<span class=\"hljs-number\">.</span>convT2Inoptr(SB)<br><span class=\"hljs-number\">0x0345</span> <span class=\"hljs-number\">00837</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">16</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">AX</span><br><span class=\"hljs-number\">0x034a</span> <span class=\"hljs-number\">00842</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">24</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">CX</span><br><span class=\"hljs-number\">0x034f</span> <span class=\"hljs-number\">00847</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.anim+<span class=\"hljs-number\">432</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0357</span> <span class=\"hljs-number\">00855</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">26</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">CX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.anim+<span class=\"hljs-number\">440</span>(<span class=\"hljs-built_in\">SP</span>)<br><br></code></pre></td></tr></table></figure>\n<p><strong>runtime.convT2Inoptr</strong> 实现可以在runtime/iface.go文件下找到:</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">func convT2Inoptr(<span class=\"hljs-built_in\">tab</span> *itab, <span class=\"hljs-built_in\">elem</span> unsafe.Pointer) (i iface) &#123;<br>\tt := <span class=\"hljs-built_in\">tab</span>._type<br>\t<span class=\"hljs-keyword\">if</span> raceenabled &#123;<br>\t\traceReadObjectPC(t, <span class=\"hljs-built_in\">elem</span>, getcallerpc(), funcPC(convT2Inoptr))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> msanenabled &#123;<br>\t\tmsanread(<span class=\"hljs-built_in\">elem</span>, t.size)<br>\t&#125;<br>\tx := mallocgc(t.size, t, <span class=\"hljs-literal\">false</span>)<br>\tmemmove(x, <span class=\"hljs-built_in\">elem</span>, t.size)<br>\ti.<span class=\"hljs-built_in\">tab</span> = <span class=\"hljs-built_in\">tab</span><br>\ti.data = x<br>\t<span class=\"hljs-built_in\">return</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回的iface结构：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\"><span class=\"hljs-built_in\">type</span> iface <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-built_in\">tab</span>  *itab<br>\tdata unsafe.Pointer<br>&#125;<br><br><span class=\"hljs-built_in\">type</span> itab <span class=\"hljs-keyword\">struct</span> &#123;<br>\tinter *interfacetype<br>\t_type *_type<br>\thash  uint32 <span class=\"hljs-comment\">// copy of _type.hash. Used for type switches.</span><br>\t_     [<span class=\"hljs-number\">4</span>]byte<br>\tfun   [<span class=\"hljs-number\">1</span>]uintptr <span class=\"hljs-comment\">// variable sized. fun[0]==0 means _type does not implement inter.</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>变量anim在内存中的表示就是一个iface结构体</li>\n<li>从汇编代码可以看到itab信息是存储在SB(全局变量)中的</li>\n<li>anim的动态类型绑定就是通过在itab绑定类型信息实现的</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;unsafe&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Animal <span class=\"hljs-keyword\">interface</span> &#123;<br>\tsing()<br>&#125;<br><span class=\"hljs-keyword\">type</span> Bird <span class=\"hljs-keyword\">struct</span> &#123;<br>\tcolor <span class=\"hljs-keyword\">int</span><br>\tweight <span class=\"hljs-keyword\">int</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Bird)</span><span class=\"hljs-title\">sing</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Printf( <span class=\"hljs-string\">&quot;bird&#123;color: %d, weight:%d&#125; is sing &quot;</span>, p.color, p.weight)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> itab <span class=\"hljs-keyword\">struct</span> &#123;<br>\tinter unsafe.Pointer<br>\t_type unsafe.Pointer<br>\thash  <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-comment\">// copy of _type.hash. Used for type switches.</span><br>\t_     [<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">byte</span><br>\tfun   [<span class=\"hljs-number\">1</span>]<span class=\"hljs-keyword\">uintptr</span> <span class=\"hljs-comment\">// variable sized. fun[0]==0 means _type does not implement inter.</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> eface <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttab  *itab<br>\tdata *Bird<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> anim Animal = Bird&#123;color: <span class=\"hljs-number\">1</span>, weight: <span class=\"hljs-number\">1999</span>&#125;<br>\t<span class=\"hljs-keyword\">var</span> e = (*eface)(unsafe.Pointer(&amp;anim))<br>\te.data.sing()<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>打印结果: bird{color: 1, weight:1999} is sing <br><br>符合预期</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021-04-22-go-str-byte-md/",
            "url": "http://example.com/2021-04-22-go-str-byte-md/",
            "title": "go str与byte转换",
            "date_published": "2021-04-22T14:10:34.000Z",
            "content_html": "<h3 id=\"string与-byte的转换\"><a href=\"#string与-byte的转换\" class=\"headerlink\" title=\"string与[]byte的转换\"></a>string与[]byte的转换</h3><h4 id=\"一般转换方式\"><a href=\"#一般转换方式\" class=\"headerlink\" title=\"一般转换方式\"></a>一般转换方式</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">bytesFromStr := []<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;abcdefg&quot;</span>)<br>strFromBytes := <span class=\"hljs-keyword\">string</span>([]<span class=\"hljs-keyword\">byte</span>&#123;<span class=\"hljs-number\">97</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">100</span>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"unsafe转换方式\"><a href=\"#unsafe转换方式\" class=\"headerlink\" title=\"unsafe转换方式\"></a>unsafe转换方式</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> StringHeader <span class=\"hljs-keyword\">struct</span> &#123;<br>\tData <span class=\"hljs-keyword\">uintptr</span><br>\tLen  <span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> SliceHeader <span class=\"hljs-keyword\">struct</span> &#123;<br>\tData <span class=\"hljs-keyword\">uintptr</span><br>\tLen  <span class=\"hljs-keyword\">int</span><br>\tCap  <span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">str2Bytes</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span> []<span class=\"hljs-title\">byte</span></span> &#123;<br>\tsh := (*StringHeader)(unsafe.Pointer(&amp;s))<br>\t<span class=\"hljs-keyword\">return</span> *(*[]<span class=\"hljs-keyword\">byte</span>)(unsafe.Pointer(&amp;SliceHeader&#123;<br>\t\tData: sh.Data,<br>\t\tLen: sh.Len,<br>\t\tCap: sh.Len,<br>\t&#125;))<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Bytes2Str</span><span class=\"hljs-params\">(b []<span class=\"hljs-keyword\">byte</span>)</span> <span class=\"hljs-title\">string</span></span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> *(*<span class=\"hljs-keyword\">string</span>)(unsafe.Pointer(&amp;b))<br>&#125;<br></code></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021-04-17-go-interface-md/",
            "url": "http://example.com/2021-04-17-go-interface-md/",
            "title": "go interface{}刨析",
            "date_published": "2021-04-17T12:59:21.000Z",
            "content_html": "<h3 id=\"初识interface\"><a href=\"#初识interface\" class=\"headerlink\" title=\"初识interface{}\"></a>初识interface{}</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">func my<span class=\"hljs-constructor\">Print(<span class=\"hljs-params\">val</span> <span class=\"hljs-params\">interface</span>&#123;&#125;)</span> &#123;<br>    fmt.<span class=\"hljs-constructor\">Printf(<span class=\"hljs-string\">&quot;%v&quot;</span>, <span class=\"hljs-params\">val</span>)</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>用过java的，第一感觉interface{}与Object的差不多。</p>\n<ul>\n<li>Object是任何对象的基类，所有对象都可以转成Object</li>\n<li>interface{}，表面看是一个空接口，而golang规定是只要实现了其方法就实现了该接口。即所有类型都实现了空接口，所以interface{}可接收指针，值对像，接口类型等</li>\n</ul>\n<h3 id=\"interface-内部结构\"><a href=\"#interface-内部结构\" class=\"headerlink\" title=\"interface{}内部结构\"></a>interface{}内部结构</h3><p>我们使用interface{}，一般是通过reflect反射得到他的实际类型</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">func <span class=\"hljs-constructor\">PrintType(<span class=\"hljs-params\">val</span> <span class=\"hljs-params\">interface</span>&#123;&#125;)</span> &#123;<br>    fmt.<span class=\"hljs-constructor\">Printf(<span class=\"hljs-string\">&quot;%s&quot;</span>, <span class=\"hljs-params\">reflect</span>.TypeOf(<span class=\"hljs-params\">arg</span>)</span>.<span class=\"hljs-constructor\">String()</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>跟踪到TypeOf函数中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TypeOf</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span> <span class=\"hljs-title\">Type</span></span> &#123;<br>\teface := *(*emptyInterface)(unsafe.Pointer(&amp;i))<br>\t<span class=\"hljs-keyword\">return</span> toType(eface.typ)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> emptyInterface <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttyp  *rtype<br>\tword unsafe.Pointer<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> rtype <span class=\"hljs-keyword\">struct</span> &#123;<br>\tsize       <span class=\"hljs-keyword\">uintptr</span><br>\tptrdata    <span class=\"hljs-keyword\">uintptr</span> <span class=\"hljs-comment\">// number of bytes in the type that can contain pointers</span><br>\thash       <span class=\"hljs-keyword\">uint32</span>  <span class=\"hljs-comment\">// hash of type; avoids computation in hash tables</span><br>\ttflag      tflag   <span class=\"hljs-comment\">// extra type information flags</span><br>\talign      <span class=\"hljs-keyword\">uint8</span>   <span class=\"hljs-comment\">// alignment of variable with this type</span><br>\tfieldAlign <span class=\"hljs-keyword\">uint8</span>   <span class=\"hljs-comment\">// alignment of struct field with this type</span><br>\tkind       <span class=\"hljs-keyword\">uint8</span>   <span class=\"hljs-comment\">// enumeration for C</span><br>\t<span class=\"hljs-comment\">// function for comparing objects of this type</span><br>\t<span class=\"hljs-comment\">// (ptr to object A, ptr to object B) -&gt; ==?</span><br>\tequal     <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(unsafe.Pointer, unsafe.Pointer)</span> <span class=\"hljs-title\">bool</span></span><br>\tgcdata    *<span class=\"hljs-keyword\">byte</span>   <span class=\"hljs-comment\">// garbage collection data</span><br>\tstr       nameOff <span class=\"hljs-comment\">// string form</span><br>\tptrToThis typeOff <span class=\"hljs-comment\">// type for pointer to this type, may be zero</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以发现interface{}的实际是一个emptyInterface的struct,下面做一下验证:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//模仿上面自定义的结构体</span><br><span class=\"hljs-keyword\">type</span> emptyInterface <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttyp  *rtype<br>\tword unsafe.Pointer<br>&#125;<br><span class=\"hljs-comment\">//模仿上面自定义的结构体</span><br><span class=\"hljs-keyword\">type</span> rtype <span class=\"hljs-keyword\">struct</span> &#123;<br>\tsize       <span class=\"hljs-keyword\">uintptr</span><br>\tptrdata    <span class=\"hljs-keyword\">uintptr</span> <span class=\"hljs-comment\">// number of bytes in the type that can contain pointers</span><br>\thash       <span class=\"hljs-keyword\">uint32</span>  <span class=\"hljs-comment\">// hash of type; avoids computation in hash tables</span><br>\ttflag      <span class=\"hljs-keyword\">uint8</span>   <span class=\"hljs-comment\">// extra type information flags</span><br>\talign      <span class=\"hljs-keyword\">uint8</span>   <span class=\"hljs-comment\">// alignment of variable with this type</span><br>\tfieldAlign <span class=\"hljs-keyword\">uint8</span>   <span class=\"hljs-comment\">// alignment of struct field with this type</span><br>\tkind       <span class=\"hljs-keyword\">uint8</span><br>\tequal     <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(unsafe.Pointer, unsafe.Pointer)</span> <span class=\"hljs-title\">bool</span></span><br>\tgcdata    *<span class=\"hljs-keyword\">byte</span>   <span class=\"hljs-comment\">// garbage collection data</span><br>\tstr       <span class=\"hljs-keyword\">int32</span> <span class=\"hljs-comment\">// string form</span><br>\tptrToThis <span class=\"hljs-keyword\">int32</span> <span class=\"hljs-comment\">// type for pointer to this type, may be zero</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">transForm</span><span class=\"hljs-params\">(obj <span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span> *<span class=\"hljs-title\">emptyInterface</span></span> &#123;<br>\t<span class=\"hljs-comment\">//强制类型转换</span><br>\t<span class=\"hljs-keyword\">return</span> (*emptyInterface)(unsafe.Pointer(&amp;obj))<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> a <span class=\"hljs-keyword\">uint64</span> = <span class=\"hljs-number\">999</span><br>\te := transForm(a)<br>    fmt.Println(reflect.Kind(e.typ.kind), *(*<span class=\"hljs-keyword\">uint64</span>)(e.word))<br>&#125;<br><br><span class=\"hljs-comment\">//打印出来uint64 999</span><br></code></pre></td></tr></table></figure>\n<p><strong>验证了我们和猜想，可以发现interface{}的数据是一个指针，那他是如何支持值赋值的呢？如果他只是把word指向了原数据，这又和golang值传递的方式相违背</strong></p>\n<h3 id=\"interface-赋值过程\"><a href=\"#interface-赋值过程\" class=\"headerlink\" title=\"interface{}赋值过程\"></a>interface{}赋值过程</h3><p>为了搞清楚他是如何赋值的，我们写个demo一探究竟：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> TVal <span class=\"hljs-keyword\">struct</span> &#123;<br>\ta <span class=\"hljs-keyword\">int</span><br>\tb <span class=\"hljs-keyword\">string</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printFace</span><span class=\"hljs-params\">(v <span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span></span>  &#123;<br>\tfmt.Println(v)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tval := TVal&#123;a: <span class=\"hljs-number\">1999</span>, b: <span class=\"hljs-string\">&quot;abcdefg&quot;</span>&#125;<br>\tprintFace(TVal&#123;a: <span class=\"hljs-number\">1999</span>, b: <span class=\"hljs-string\">&quot;abcdefg&quot;</span>&#125;)<br>\tprintFace(&amp;val)<br>\tt := <span class=\"hljs-number\">10</span><br>\tprintFace(t)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>三种反汇编:</p>\n<ul>\n<li>go build –gcflags=”-l -N” -o helloworld， 去掉优化</li>\n<li>go tool compile -N -S main.go，去掉优化</li>\n<li>go tool objdump -S test &gt; abc.asm</li>\n</ul>\n<p>统一使用第二种方式。</p>\n<h4 id=\"值传递分析\"><a href=\"#值传递分析\" class=\"headerlink\" title=\"值传递分析\"></a>值传递分析</h4><p>截取 <strong>printFace(TVal{a: 1999, b: “abcdefg”})</strong> 汇编代码:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\"><span class=\"hljs-number\">0x00c6</span> <span class=\"hljs-number\">00198</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       PCDATA  <span class=\"hljs-number\">$0</span>, $-<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0x00c6</span> <span class=\"hljs-number\">00198</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">XORPS</span>   X0, X0<br>//autotmp_23 可以看成是一个地址符号，基地址<span class=\"hljs-number\">560</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x00c9</span> <span class=\"hljs-number\">00201</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVUPS</span>  X0, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_23+<span class=\"hljs-number\">560</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x00d1</span> <span class=\"hljs-number\">00209</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">$0</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_23+<span class=\"hljs-number\">576</span>(<span class=\"hljs-built_in\">SP</span>)<br>//把<span class=\"hljs-number\">1999</span>赋值到地址<span class=\"hljs-number\">560</span>(<span class=\"hljs-built_in\">SP</span>)上<br><span class=\"hljs-number\">0x00dd</span> <span class=\"hljs-number\">00221</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">$1999</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_23+<span class=\"hljs-number\">560</span>(<span class=\"hljs-built_in\">SP</span>)<br>//字符串的地址(SB为全局变量, go<span class=\"hljs-number\">.</span>string.<span class=\"hljs-string\">&quot;abcdefg&quot;</span>可以看成地址符号),赋值给<span class=\"hljs-built_in\">AX</span><br><span class=\"hljs-number\">0x00e9</span> <span class=\"hljs-number\">00233</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       LEAQ    go<span class=\"hljs-number\">.</span>string.<span class=\"hljs-string\">&quot;abcdefg&quot;</span>(SB), <span class=\"hljs-built_in\">AX</span><br>//字符串的地址赋值给<span class=\"hljs-number\">568</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x00f0</span> <span class=\"hljs-number\">00240</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_23+<span class=\"hljs-number\">568</span>(<span class=\"hljs-built_in\">SP</span>)<br>//把字符串长度<span class=\"hljs-number\">7</span>赋值给<span class=\"hljs-number\">576</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x00f8</span> <span class=\"hljs-number\">00248</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">$7</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_23+<span class=\"hljs-number\">576</span>(<span class=\"hljs-built_in\">SP</span>)<br>//获取struct TVal的类型元数据,<br>// autotmp_23的数据为 |<span class=\"hljs-number\">1999</span> (8<span class=\"hljs-built_in\">byte</span>)| str_addr (8<span class=\"hljs-built_in\">byte</span>) | <span class=\"hljs-number\">7</span> (8<span class=\"hljs-built_in\">byte</span>)|,其实就是struct &#123;<span class=\"hljs-keyword\">int</span>, stringHeader&#125;<br><span class=\"hljs-number\">0x0104</span> <span class=\"hljs-number\">00260</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       LEAQ    type.<span class=\"hljs-string\">&quot;&quot;</span>.TVal(SB), <span class=\"hljs-built_in\">AX</span><br>//TVal的类型元数据(_type)地址给<span class=\"hljs-built_in\">SP</span><br><span class=\"hljs-number\">0x010b</span> <span class=\"hljs-number\">00267</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, (<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x010f</span> <span class=\"hljs-number\">00271</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       LEAQ    <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_23+<span class=\"hljs-number\">560</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">AX</span><br>//autotmp_23地址赋值给<span class=\"hljs-number\">8</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0117</span> <span class=\"hljs-number\">00279</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-number\">8</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x011c</span> <span class=\"hljs-number\">00284</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       PCDATA  <span class=\"hljs-number\">$1</span>, <span class=\"hljs-number\">$1</span><br><span class=\"hljs-number\">0x011c</span> <span class=\"hljs-number\">00284</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">NOP</span><br>//调用runtime<span class=\"hljs-number\">.</span>convT2E，参数为(<span class=\"hljs-built_in\">SP</span>)(*_type), <span class=\"hljs-number\">8</span>(<span class=\"hljs-built_in\">SP</span>)（struct &#123;<span class=\"hljs-keyword\">int</span>, stringHeader&#125;指针）<br><span class=\"hljs-number\">0x0120</span> <span class=\"hljs-number\">00288</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">CALL</span>    runtime<span class=\"hljs-number\">.</span>convT2E(SB)<br><span class=\"hljs-number\">0x0125</span> <span class=\"hljs-number\">00293</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">16</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">AX</span><br><span class=\"hljs-number\">0x012a</span> <span class=\"hljs-number\">00298</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">24</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">CX</span><br><span class=\"hljs-number\">0x012f</span> <span class=\"hljs-number\">00303</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_28+<span class=\"hljs-number\">432</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0137</span> <span class=\"hljs-number\">00311</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">CX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_28+<span class=\"hljs-number\">440</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x013f</span> <span class=\"hljs-number\">00319</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.v+<span class=\"hljs-number\">224</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0147</span> <span class=\"hljs-number\">00327</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">14</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">CX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.v+<span class=\"hljs-number\">232</span>(<span class=\"hljs-built_in\">SP</span>)<br></code></pre></td></tr></table></figure>\n<p>最后调用runtime.convT2E，看一下源码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\">func convT2E(t *_<span class=\"hljs-keyword\">type</span>, elem <span class=\"hljs-keyword\">unsafe</span>.Pointer) (e eface) &#123;<br>\t<span class=\"hljs-keyword\">if</span> raceenabled &#123;<br>\t\traceReadObjectPC(t, elem, getcallerpc(), funcPC(convT2E))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> msanenabled &#123;<br>\t\tmsanread(elem, t.size)<br>\t&#125;<br>\tx := mallocgc(t.size, t, <span class=\"hljs-literal\">true</span>)<br>\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> We allocate a zeroed object only to overwrite it with actual data.</span><br>\t<span class=\"hljs-comment\">// Figure out how to avoid zeroing. Also below in convT2Eslice, convT2I, convT2Islice.</span><br>\ttypedmemmove(t, x, elem)<br>\te._<span class=\"hljs-keyword\">type</span> = t<br>\te.data = x<br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">eface</span></span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> &#123;</span><br>\t_<span class=\"hljs-keyword\">type</span> *_<span class=\"hljs-keyword\">type</span><br>\tdata  <span class=\"hljs-keyword\">unsafe</span>.Pointer<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>** 可以发现里面申请了一块sizeof(type)大小的内存，并初始化为elem。<br>返回值eface和前面的emptyInterface一样 **</p>\n<h4 id=\"指针传递分析\"><a href=\"#指针传递分析\" class=\"headerlink\" title=\"指针传递分析\"></a>指针传递分析</h4><p>截取 <strong>printFace(&amp;val)</strong> 汇编代码:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\"><span class=\"hljs-number\">0x02a9</span> <span class=\"hljs-number\">00681</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       PCDATA  <span class=\"hljs-number\">$1</span>, $-<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0x02a9</span> <span class=\"hljs-number\">00681</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       <span class=\"hljs-keyword\">JMP</span>     <span class=\"hljs-number\">683</span><br>//val地址赋值给<span class=\"hljs-built_in\">AX</span><br><span class=\"hljs-number\">0x02ab</span> <span class=\"hljs-number\">00683</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-string\">&quot;&quot;</span>.&amp;val+<span class=\"hljs-number\">152</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">AX</span><br>//<span class=\"hljs-built_in\">AX</span>赋值给<span class=\"hljs-number\">144</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x02b3</span> <span class=\"hljs-number\">00691</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_26+<span class=\"hljs-number\">144</span>(<span class=\"hljs-built_in\">SP</span>)<br>//struct TVal的类型元数据指针赋值给<span class=\"hljs-built_in\">CX</span><br><span class=\"hljs-number\">0x02bb</span> <span class=\"hljs-number\">00699</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       LEAQ    type.*<span class=\"hljs-string\">&quot;&quot;</span>.TVal(SB), <span class=\"hljs-built_in\">CX</span><br>//<span class=\"hljs-built_in\">CX</span>，即struct TVal的类型元数据指针，赋值给 <span class=\"hljs-number\">400</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x02c2</span> <span class=\"hljs-number\">00706</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">CX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_32+<span class=\"hljs-number\">400</span>(<span class=\"hljs-built_in\">SP</span>)<br>//<span class=\"hljs-built_in\">AX</span>，即val的地址赋值给 <span class=\"hljs-number\">408</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x02ca</span> <span class=\"hljs-number\">00714</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_32+<span class=\"hljs-number\">408</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x02d2</span> <span class=\"hljs-number\">00722</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">CX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.v+<span class=\"hljs-number\">240</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x02da</span> <span class=\"hljs-number\">00730</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">15</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.v+<span class=\"hljs-number\">248</span>(<span class=\"hljs-built_in\">SP</span>)<br></code></pre></td></tr></table></figure>\n<p>可以看出只是地址赋值操作</p>\n<h4 id=\"基本类型传递分析\"><a href=\"#基本类型传递分析\" class=\"headerlink\" title=\"基本类型传递分析\"></a>基本类型传递分析</h4><p>截取 ** printFace(t) ** 汇编代码:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\"><span class=\"hljs-number\">0x046e</span> <span class=\"hljs-number\">01134</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">16</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">$1999</span>, <span class=\"hljs-string\">&quot;&quot;</span>.t+<span class=\"hljs-number\">64</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x0477</span> <span class=\"hljs-number\">01143</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">$1999</span>, (<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x047f</span> <span class=\"hljs-number\">01151</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       PCDATA  <span class=\"hljs-number\">$1</span>, <span class=\"hljs-number\">$0</span><br><span class=\"hljs-number\">0x047f</span> <span class=\"hljs-number\">01151</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">NOP</span><br><span class=\"hljs-number\">0x0480</span> <span class=\"hljs-number\">01152</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">CALL</span>    runtime<span class=\"hljs-number\">.</span>convT64(SB)<br><span class=\"hljs-number\">0x0485</span> <span class=\"hljs-number\">01157</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-number\">8</span>(<span class=\"hljs-built_in\">SP</span>), <span class=\"hljs-built_in\">AX</span><br><span class=\"hljs-number\">0x048a</span> <span class=\"hljs-number\">01162</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_38+<span class=\"hljs-number\">136</span>(<span class=\"hljs-built_in\">SP</span>)<br>//类型元数据地址赋值是一样的<br><span class=\"hljs-number\">0x0492</span> <span class=\"hljs-number\">01170</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       LEAQ    type<span class=\"hljs-number\">.</span><span class=\"hljs-keyword\">int</span>(SB), <span class=\"hljs-built_in\">CX</span><br><span class=\"hljs-number\">0x0499</span> <span class=\"hljs-number\">01177</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">CX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_37+<span class=\"hljs-number\">384</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x04a1</span> <span class=\"hljs-number\">01185</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>..autotmp_37+<span class=\"hljs-number\">392</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x04a9</span> <span class=\"hljs-number\">01193</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">CX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.v+<span class=\"hljs-number\">224</span>(<span class=\"hljs-built_in\">SP</span>)<br><span class=\"hljs-number\">0x04b1</span> <span class=\"hljs-number\">01201</span> (main<span class=\"hljs-number\">.</span>go:<span class=\"hljs-number\">17</span>)       <span class=\"hljs-keyword\">MOVQ</span>    <span class=\"hljs-built_in\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.v+<span class=\"hljs-number\">232</span>(<span class=\"hljs-built_in\">SP</span>)<br><br>//runtime<span class=\"hljs-number\">.</span>convT64在runtime/iface<span class=\"hljs-number\">.</span>go下<br>func convT64(val uint64) (x unsafe<span class=\"hljs-number\">.</span>Pointer) &#123;<br>\tif val &lt; uint64(len(staticuint64s)) &#123;<br>\t\tx = unsafe<span class=\"hljs-number\">.</span>Pointer(&amp;staticuint64s[val])<br>\t&#125; else &#123;<br>\t\tx = mallocgc(<span class=\"hljs-number\">8</span>, uint64Type, false)<br>\t\t*(*uint64)(x) = val<br>\t&#125;<br>\treturn<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>在runtime/iface.go有一系列的convTXXX方法，用于不同的类型。其主要目的是为了利用缓存，避免频繁的内存分配</p>\n<ul>\n<li><strong>struct { a int}</strong> 这样的结构也适用于这种情况</li>\n<li>常量的情况，会是一个全局变量的指针赋值</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>interface{}在实际中是一个eface的结构体。</li>\n<li>interface{}更像一个包装类</li>\n<li>主要通过reflect来操作</li>\n</ul>\n<p>参考资料:<br><a href=\"https://lrita.github.io/2017/12/12/golang-asm/\">https://lrita.github.io/2017/12/12/golang-asm/</a></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021-04-16-go-chan-md/",
            "url": "http://example.com/2021-04-16-go-chan-md/",
            "title": "go channel",
            "date_published": "2021-04-16T14:06:41.000Z",
            "content_html": "<h3 id=\"channel的功能及使用\"><a href=\"#channel的功能及使用\" class=\"headerlink\" title=\"channel的功能及使用\"></a>channel的功能及使用</h3><p>channel是golang里面实现并发的基础，他主要用于在goroutine之间通信<br>。他与rust中的Channel非常相似，不知道谁模仿谁的。</p>\n<p> channel的使用方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//myChan 本身是一个指针，可以随意在函数参数中传递</span><br><span class=\"hljs-comment\">//无缓存的chan</span><br>myChan := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)<br><span class=\"hljs-comment\">//有缓存的chan</span><br>myChan := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-comment\">//定义只读/写 chan没有意义，一般用于在函数传递中限制chan的行为</span><br><span class=\"hljs-comment\">//只写chan</span><br>myChan := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> &lt;- <span class=\"hljs-keyword\">int</span>)<br><span class=\"hljs-comment\">//只读chan</span><br>myChan := <span class=\"hljs-built_in\">make</span>(&lt;- <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)<br><br><span class=\"hljs-comment\">//发送数据到通道中</span><br>myChan &lt;- <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-comment\">//使用阻塞方式从通道中读取数据</span><br>myBlockData := &lt;- myChan<br><span class=\"hljs-comment\">//忽略读取的数据</span><br>&lt;-myChan<br><br><span class=\"hljs-comment\">//使用非阻塞方式从通道中读取数据,一般使用select而非这种方式</span><br>myNoBlockData, ok := &lt;- myChan<br><br><span class=\"hljs-comment\">//循环接收数据， 没有数据时会阻塞，</span><br><span class=\"hljs-comment\">//自己设计条件退出循环,或者调用close(myChan)后也会退出</span><br><span class=\"hljs-keyword\">for</span> data := <span class=\"hljs-keyword\">range</span> myChan &#123;<br>&#125;<br><br><span class=\"hljs-comment\">//关闭chan</span><br><span class=\"hljs-built_in\">close</span>(myChan)<br><br></code></pre></td></tr></table></figure>\n<h5 id=\"chan的缓存\"><a href=\"#chan的缓存\" class=\"headerlink\" title=\"chan的缓存\"></a>chan的缓存</h5><ul>\n<li>无缓存的情况，当没有chan的读操作取时，chan的数据的写入会阻塞</li>\n<li>无缓存的情况，当没有chan的写操作取时，chan的数据的读入会阻塞</li>\n<li>有缓存的情况，类似于生产者和消费者模式</li>\n</ul>\n<h5 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h5><ul>\n<li>给关闭的chan发消息会panic</li>\n<li>从已关闭的chan读消息,读出来的值为chan通道类型的空值</li>\n</ul>\n<h3 id=\"channel的实现\"><a href=\"#channel的实现\" class=\"headerlink\" title=\"channel的实现\"></a>channel的实现</h3><p>channel的源码实现在runtime/chan.go下面</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> hchan <span class=\"hljs-keyword\">struct</span> &#123;<br>\tqcount   <span class=\"hljs-keyword\">uint</span>           <span class=\"hljs-comment\">// total data in the queue</span><br>\tdataqsiz <span class=\"hljs-keyword\">uint</span>           <span class=\"hljs-comment\">// size of the circular queue</span><br>\tbuf      unsafe.Pointer <span class=\"hljs-comment\">// points to an array of dataqsiz elements</span><br>\telemsize <span class=\"hljs-keyword\">uint16</span><br>\tclosed   <span class=\"hljs-keyword\">uint32</span><br>\telemtype *_type <span class=\"hljs-comment\">// element type</span><br>\tsendx    <span class=\"hljs-keyword\">uint</span>   <span class=\"hljs-comment\">// send index</span><br>\trecvx    <span class=\"hljs-keyword\">uint</span>   <span class=\"hljs-comment\">// receive index</span><br>\trecvq    waitq  <span class=\"hljs-comment\">// list of recv waiters</span><br>\tsendq    waitq  <span class=\"hljs-comment\">// list of send waiters</span><br><br>\t<span class=\"hljs-comment\">// lock protects all fields in hchan, as well as several</span><br>\t<span class=\"hljs-comment\">// fields in sudogs blocked on this channel.</span><br>\t<span class=\"hljs-comment\">//</span><br>\t<span class=\"hljs-comment\">// Do not change another G&#x27;s status while holding this lock</span><br>\t<span class=\"hljs-comment\">// (in particular, do not ready a G), as this can deadlock</span><br>\t<span class=\"hljs-comment\">// with stack shrinking.</span><br>\tlock mutex<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"channel的创建过程\"><a href=\"#channel的创建过程\" class=\"headerlink\" title=\"channel的创建过程\"></a>channel的创建过程</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\">func <span class=\"hljs-title\">makechan</span><span class=\"hljs-params\">(t *chantype, size <span class=\"hljs-keyword\">int</span>)</span> *hchan </span>&#123;<br>\telem := t.elem<br><br>\t<span class=\"hljs-comment\">// compiler checks this but be safe.</span><br>\t<span class=\"hljs-keyword\">if</span> elem.size &gt;= <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">16</span> &#123;<br>\t\t<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">throw</span></span>(<span class=\"hljs-string\">&quot;makechan: invalid channel element type&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> hchanSize%maxAlign != <span class=\"hljs-number\">0</span> || elem.align &gt; maxAlign &#123;<br>\t\t<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">throw</span></span>(<span class=\"hljs-string\">&quot;makechan: bad alignment&quot;</span>)<br>\t&#125;<br><br>\tmem, overflow := math.<span class=\"hljs-built_in\">MulUintptr</span>(elem.size, <span class=\"hljs-built_in\">uintptr</span>(size))<br>\t<span class=\"hljs-keyword\">if</span> overflow || mem &gt; maxAlloc-hchanSize || size &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-built_in\">plainError</span>(<span class=\"hljs-string\">&quot;makechan: size out of range&quot;</span>))<br>\t&#125;<br>\t<br>\tvar c *hchan<br>\t<span class=\"hljs-keyword\">switch</span> &#123;<br>\t<span class=\"hljs-keyword\">case</span> mem == <span class=\"hljs-number\">0</span>:<br>\t\t<span class=\"hljs-comment\">// Queue or element size is zero.</span><br>\t\tc = (*hchan)(<span class=\"hljs-built_in\">mallocgc</span>(hchanSize, nil, <span class=\"hljs-literal\">true</span>))<br>\t\t<span class=\"hljs-comment\">// Race detector uses this location for synchronization.</span><br>\t\tc.buf = c.<span class=\"hljs-built_in\">raceaddr</span>()<br>\t<span class=\"hljs-keyword\">case</span> elem.ptrdata == <span class=\"hljs-number\">0</span>:<br>\t\t<span class=\"hljs-comment\">// Elements do not contain pointers.</span><br>\t\t<span class=\"hljs-comment\">// Allocate hchan and buf in one call.</span><br>\t\tc = (*hchan)(<span class=\"hljs-built_in\">mallocgc</span>(hchanSize+mem, nil, <span class=\"hljs-literal\">true</span>))<br>\t\tc.buf = <span class=\"hljs-built_in\">add</span>(unsafe.<span class=\"hljs-built_in\">Pointer</span>(c), hchanSize)<br>\t<span class=\"hljs-keyword\">default</span>:<br>\t\t<span class=\"hljs-comment\">// Elements contain pointers.</span><br>\t\tc = <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">new</span></span>(hchan)<br>\t\tc.buf = <span class=\"hljs-built_in\">mallocgc</span>(mem, elem, <span class=\"hljs-literal\">true</span>)<br>\t&#125;<br><br>\tc.elemsize = <span class=\"hljs-built_in\">uint16</span>(elem.size)<br>\tc.elemtype = elem<br>\tc.dataqsiz = <span class=\"hljs-built_in\">uint</span>(size)<br>\t<span class=\"hljs-built_in\">lockInit</span>(&amp;c.lock, lockRankHchan)<br><br>\t<span class=\"hljs-keyword\">if</span> debugChan &#123;<br>\t\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;makechan: chan=&quot;</span>, c, <span class=\"hljs-string\">&quot;; elemsize=&quot;</span>, elem.size, <span class=\"hljs-string\">&quot;; dataqsiz=&quot;</span>, size, <span class=\"hljs-string\">&quot;\\n&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>先判断容量大小</li>\n<li>计算chan队列需要的缓存大小</li>\n<li><ol>\n<li>如果为空队列， 则直接用mallocgc分配一个hchan的对像</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>如果缓存的元素不是指针类型的，则直接用mallocgc分配一整块内存（包括hchan和队列</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>元素包含指针，则先在堆上分配一个hchan对像,再用mallocgc分配chan队列的大小</li>\n</ol>\n</li>\n<li>mallocgc分两种情况，size较小时直接从P的缓存列表中获取，较大时 (&gt;32 kB)直接在堆上分配</li>\n</ul>\n<h3 id=\"channel的缓存\"><a href=\"#channel的缓存\" class=\"headerlink\" title=\"channel的缓存\"></a>channel的缓存</h3><p>hchan中与缓存有关的字段：</p>\n<ul>\n<li>buf 环形队列的地址</li>\n<li>sendx 环形队列的发送地址</li>\n<li>recvx 环形队列的接受地址</li>\n</ul>\n<p>根据代码可以得面缓存的结构如下图所示:</p>\n<p><img src=\"https://note.youdao.com/yws/public/resource/70e1ba4f25d0499b923cafcb2cfa8c7c/xmlnote/WEBRESOURCE94bf6c743675b23712b98382c174bd89/4832\" alt=\"image\"></p>\n<p>至于为什么会根据元素类型中包含指针来设计不同的结构，我觉得主要原因是考虑gc时会改变指针的地址。</p>\n<h3 id=\"chan的发送过程\"><a href=\"#chan的发送过程\" class=\"headerlink\" title=\"chan的发送过程\"></a>chan的发送过程</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">chansend</span><span class=\"hljs-params\">(c *hchan, ep unsafe.Pointer, block <span class=\"hljs-keyword\">bool</span>, callerpc <span class=\"hljs-keyword\">uintptr</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t...<br>\t<span class=\"hljs-comment\">//非阻塞，未关闭，且缓存满了直接返回</span><br>\t<span class=\"hljs-keyword\">if</span> !block &amp;&amp; c.closed == <span class=\"hljs-number\">0</span> &amp;&amp; full(c) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>    ...<br>    <span class=\"hljs-comment\">//操作之前先锁住</span><br>\tlock(&amp;c.lock)<br>    ...<br>    <span class=\"hljs-comment\">//从接收队列中取一个接收者，把消息发送给他</span><br>\t<span class=\"hljs-keyword\">if</span> sg := c.recvq.dequeue(); sg != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tsend(c, sg, ep, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; unlock(&amp;c.lock) &#125;, <span class=\"hljs-number\">3</span>)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>    ...<br>   <span class=\"hljs-comment\">//没有接收者时，队列未满，则入缓存队列</span><br>\t<span class=\"hljs-keyword\">if</span> c.qcount &lt; c.dataqsiz &#123;<br>\t\t<span class=\"hljs-comment\">// Space is available in the channel buffer. Enqueue the element to send.</span><br>\t\tqp := chanbuf(c, c.sendx)<br>\t\t<span class=\"hljs-keyword\">if</span> raceenabled &#123;<br>\t\t\traceacquire(qp)<br>\t\t\tracerelease(qp)<br>\t\t&#125;<br>\t\ttypedmemmove(c.elemtype, qp, ep)<br>\t\tc.sendx++<br>\t\t<span class=\"hljs-keyword\">if</span> c.sendx == c.dataqsiz &#123;<br>\t\t\tc.sendx = <span class=\"hljs-number\">0</span><br>\t\t&#125;<br>\t\tc.qcount++<br>\t\tunlock(&amp;c.lock)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>    ...<br><br>\t<span class=\"hljs-comment\">// 获取与当前的goroutine相关的sudog并入到发送等待队列</span><br>\tgp := getg()<br>\tmysg := acquireSudog()<br>\t...<br>\tc.sendq.enqueue(mysg)<br>\t<br>\t<span class=\"hljs-comment\">//通知P阻塞，并阻塞住</span><br>\tatomic.Store8(&amp;gp.parkingOnChan, <span class=\"hljs-number\">1</span>)<br>\tgopark(chanparkcommit, unsafe.Pointer(&amp;c.lock), waitReasonChanSend, traceEvGoBlockSend, <span class=\"hljs-number\">2</span>)<br>\t...<br>\t<br>\treleaseSudog(mysg)<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"channel的接收过程\"><a href=\"#channel的接收过程\" class=\"headerlink\" title=\"channel的接收过程\"></a>channel的接收过程</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">chanrecv</span><span class=\"hljs-params\">(c *hchan, ep unsafe.Pointer, block <span class=\"hljs-keyword\">bool</span>)</span> <span class=\"hljs-params\">(selected, received <span class=\"hljs-keyword\">bool</span>)</span></span> &#123;<br>\t...<br>\t<span class=\"hljs-comment\">//非阻塞</span><br>\t<span class=\"hljs-comment\">//无缓存情况时无发送等待 或 缓存为空</span><br>\t<span class=\"hljs-keyword\">if</span> !block &amp;&amp; empty(c) &#123;<br>\t    <span class=\"hljs-comment\">//没关闭，直接返回</span><br>\t\t<span class=\"hljs-keyword\">if</span> atomic.Load(&amp;c.closed) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t     <span class=\"hljs-comment\">//关闭，则产生select事件</span><br>\t\t<span class=\"hljs-keyword\">if</span> empty(c) &#123;<br>\t\t    ...<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>    ...<br>    <span class=\"hljs-comment\">//操作前先锁住</span><br>\tlock(&amp;c.lock)<br><br>    <span class=\"hljs-comment\">//关闭了且缓存为空,产生select事件</span><br>\t<span class=\"hljs-keyword\">if</span> c.closed != <span class=\"hljs-number\">0</span> &amp;&amp; c.qcount == <span class=\"hljs-number\">0</span> &#123;<br>\t\t...<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>    <span class=\"hljs-comment\">//从发送等待队列中取出发送者,把数据给ep(接受者数据地址)</span><br>\t<span class=\"hljs-keyword\">if</span> sg := c.sendq.dequeue(); sg != <span class=\"hljs-literal\">nil</span> &#123;<br>\t    ...<br>\t\trecv(c, sg, ep, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; unlock(&amp;c.lock) &#125;, <span class=\"hljs-number\">3</span>)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span><br>\t&#125;<br>    <span class=\"hljs-comment\">//没有发送者时，当缓存中有数据时,从缓存中取一个数据</span><br>\t<span class=\"hljs-keyword\">if</span> c.qcount &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Receive directly from queue</span><br>\t\tqp := chanbuf(c, c.recvx)<br>\t    ...<br>\t\t<span class=\"hljs-keyword\">if</span> ep != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\ttypedmemmove(c.elemtype, ep, qp)<br>\t\t&#125;<br>\t\ttypedmemclr(c.elemtype, qp)<br>\t\tc.recvx++<br>\t\t<span class=\"hljs-keyword\">if</span> c.recvx == c.dataqsiz &#123;<br>\t\t\tc.recvx = <span class=\"hljs-number\">0</span><br>\t\t&#125;<br>\t\tc.qcount--<br>\t\tunlock(&amp;c.lock)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">//缓存中也没有数据时,获取一个与当前goroutine相关的sudog，并入到接收队列中</span><br>\tgp := getg()<br>\tmysg := acquireSudog()<br>    ...<br>\tc.recvq.enqueue(mysg)<br>    <span class=\"hljs-comment\">//通知P阻塞，并阻塞住</span><br>\tatomic.Store8(&amp;gp.parkingOnChan, <span class=\"hljs-number\">1</span>)<br>\tgopark(chanparkcommit, unsafe.Pointer(&amp;c.lock), waitReasonChanReceive, traceEvGoBlockRecv, <span class=\"hljs-number\">2</span>)<br>    ...<br>    阻塞完后，说明有数据来了，产生<span class=\"hljs-keyword\">select</span>事件<br>\treleaseSudog(mysg)<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, !closed<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"chan的关闭过程\"><a href=\"#chan的关闭过程\" class=\"headerlink\" title=\"chan的关闭过程\"></a>chan的关闭过程</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func closechan(c *hchan) &#123;<br>    <span class=\"hljs-comment\">//关闭一个空的chan会崩溃</span><br>\t<span class=\"hljs-keyword\">if</span> c == nil &#123;<br>\t\tpanic(plainError(<span class=\"hljs-string\">&quot;close of nil channel&quot;</span>))<br>\t&#125;<br>    <span class=\"hljs-comment\">//操作之前先锁住</span><br>\tlock(&amp;c.lock)<br>\t<span class=\"hljs-comment\">//关闭一个关闭的chan也会崩溃</span><br>\t<span class=\"hljs-keyword\">if</span> c<span class=\"hljs-selector-class\">.closed</span> != <span class=\"hljs-number\">0</span> &#123;<br>\t\tunlock(&amp;c.lock)<br>\t\tpanic(plainError(<span class=\"hljs-string\">&quot;close of closed channel&quot;</span>))<br>\t&#125;<br>    ...<br>    <span class=\"hljs-comment\">//设置为关闭</span><br>\tc<span class=\"hljs-selector-class\">.closed</span> = <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-selector-tag\">var</span> glist gList<br><br>\t<span class=\"hljs-comment\">// 释放所有的接收者</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tsg := c<span class=\"hljs-selector-class\">.recvq</span><span class=\"hljs-selector-class\">.dequeue</span>()<br>\t    ...<br>\t\tglist<span class=\"hljs-selector-class\">.push</span>(gp)<br>\t&#125;<br><br>    <span class=\"hljs-comment\">//// 释放所有的发送等待者，他们会panic</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tsg := c<span class=\"hljs-selector-class\">.sendq</span><span class=\"hljs-selector-class\">.dequeue</span>()<br>\t\t...<br>\t\tglist<span class=\"hljs-selector-class\">.push</span>(gp)<br>\t&#125;<br>\tunlock(&amp;c.lock)<br><br>\t<span class=\"hljs-comment\">// Ready all Gs now that we&#x27;ve dropped the channel lock.</span><br>\t<span class=\"hljs-keyword\">for</span> !glist<span class=\"hljs-selector-class\">.empty</span>() &#123;<br>\t\tgp := glist<span class=\"hljs-selector-class\">.pop</span>()<br>\t\tgp<span class=\"hljs-selector-class\">.schedlink</span> = <span class=\"hljs-number\">0</span><br>\t\tgoready(gp, <span class=\"hljs-number\">3</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n",
            "tags": []
        }
    ]
}